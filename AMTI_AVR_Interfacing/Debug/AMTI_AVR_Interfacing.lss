
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000516  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000005ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae4  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f8  00000000  00000000  00002e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081c  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b45  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_9>
  28:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_10>
  2c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_11>
  30:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  8a:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_GroupSetDirection>:
			 ReturnValue= NOK;		
	}
	asm	volatile ("nop"); 
	return ReturnValue;
	
}
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	79 f0       	breq	.+30     	; 0xb4 <Dio_GroupSetDirection+0x22>
  96:	28 f0       	brcs	.+10     	; 0xa2 <Dio_GroupSetDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	a9 f0       	breq	.+42     	; 0xc6 <Dio_GroupSetDirection+0x34>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	e1 f0       	breq	.+56     	; 0xd8 <Dio_GroupSetDirection+0x46>
  a0:	24 c0       	rjmp	.+72     	; 0xea <Dio_GroupSetDirection+0x58>
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	96 2f       	mov	r25, r22
  a6:	90 95       	com	r25
  a8:	89 23       	and	r24, r25
  aa:	64 23       	and	r22, r20
  ac:	68 2b       	or	r22, r24
  ae:	6a bb       	out	0x1a, r22	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	1c c0       	rjmp	.+56     	; 0xec <Dio_GroupSetDirection+0x5a>
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	96 2f       	mov	r25, r22
  b8:	90 95       	com	r25
  ba:	89 23       	and	r24, r25
  bc:	64 23       	and	r22, r20
  be:	68 2b       	or	r22, r24
  c0:	67 bb       	out	0x17, r22	; 23
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	13 c0       	rjmp	.+38     	; 0xec <Dio_GroupSetDirection+0x5a>
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	96 2f       	mov	r25, r22
  ca:	90 95       	com	r25
  cc:	89 23       	and	r24, r25
  ce:	64 23       	and	r22, r20
  d0:	68 2b       	or	r22, r24
  d2:	64 bb       	out	0x14, r22	; 20
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0a c0       	rjmp	.+20     	; 0xec <Dio_GroupSetDirection+0x5a>
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	96 2f       	mov	r25, r22
  dc:	90 95       	com	r25
  de:	89 23       	and	r24, r25
  e0:	64 23       	and	r22, r20
  e2:	68 2b       	or	r22, r24
  e4:	61 bb       	out	0x11, r22	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <Dio_GroupSetDirection+0x5a>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <Dio_PortWrite>:
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
	switch (port)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	49 f0       	breq	.+18     	; 0x106 <Dio_PortWrite+0x16>
  f4:	28 f0       	brcs	.+10     	; 0x100 <Dio_PortWrite+0x10>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	49 f0       	breq	.+18     	; 0x10c <Dio_PortWrite+0x1c>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	51 f0       	breq	.+20     	; 0x112 <Dio_PortWrite+0x22>
  fe:	0c c0       	rjmp	.+24     	; 0x118 <Dio_PortWrite+0x28>
	{
		case A:
		PORTA = WriteValue;
 100:	6b bb       	out	0x1b, r22	; 27
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 102:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case A:
		PORTA = WriteValue;
		break;
 104:	0a c0       	rjmp	.+20     	; 0x11a <Dio_PortWrite+0x2a>
		case B:
		PORTB = WriteValue;
 106:	68 bb       	out	0x18, r22	; 24
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 108:	81 e0       	ldi	r24, 0x01	; 1
		case A:
		PORTA = WriteValue;
		break;
		case B:
		PORTB = WriteValue;
		break;
 10a:	07 c0       	rjmp	.+14     	; 0x11a <Dio_PortWrite+0x2a>
		case C:
		PORTC = WriteValue;
 10c:	65 bb       	out	0x15, r22	; 21
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 10e:	81 e0       	ldi	r24, 0x01	; 1
		case B:
		PORTB = WriteValue;
		break;
		case C:
		PORTC = WriteValue;
		break;
 110:	04 c0       	rjmp	.+8      	; 0x11a <Dio_PortWrite+0x2a>
		case D:
		PORTD = WriteValue;
 112:	62 bb       	out	0x12, r22	; 18
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 114:	81 e0       	ldi	r24, 0x01	; 1
		case C:
		PORTC = WriteValue;
		break;
		case D:
		PORTD = WriteValue;
		break;
 116:	01 c0       	rjmp	.+2      	; 0x11a <Dio_PortWrite+0x2a>
		default:
		ReturnValue = NOK ;
 118:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	asm	volatile ("nop"); 
 11a:	00 00       	nop
	return ReturnValue;
}
 11c:	08 95       	ret

0000011e <Dio_PinWrite>:
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	31 f1       	breq	.+76     	; 0x16e <Dio_PinWrite+0x50>
 122:	38 f0       	brcs	.+14     	; 0x132 <Dio_PinWrite+0x14>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	09 f4       	brne	.+2      	; 0x12a <Dio_PinWrite+0xc>
 128:	40 c0       	rjmp	.+128    	; 0x1aa <Dio_PinWrite+0x8c>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	09 f4       	brne	.+2      	; 0x130 <Dio_PinWrite+0x12>
 12e:	5a c0       	rjmp	.+180    	; 0x1e4 <Dio_PinWrite+0xc6>
 130:	76 c0       	rjmp	.+236    	; 0x21e <Dio_PinWrite+0x100>
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
 132:	41 11       	cpse	r20, r1
 134:	0d c0       	rjmp	.+26     	; 0x150 <Dio_PinWrite+0x32>
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Dio_PinWrite+0x24>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <Dio_PinWrite+0x20>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	70 c0       	rjmp	.+224    	; 0x230 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	09 f0       	breq	.+2      	; 0x156 <Dio_PinWrite+0x38>
 154:	66 c0       	rjmp	.+204    	; 0x222 <Dio_PinWrite+0x104>
 156:	2b b3       	in	r18, 0x1b	; 27
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_PinWrite+0x44>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_PinWrite+0x40>
 166:	82 2b       	or	r24, r18
 168:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	61 c0       	rjmp	.+194    	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
 16e:	41 11       	cpse	r20, r1
 170:	0d c0       	rjmp	.+26     	; 0x18c <Dio_PinWrite+0x6e>
 172:	28 b3       	in	r18, 0x18	; 24
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_PinWrite+0x60>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_PinWrite+0x5c>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	52 c0       	rjmp	.+164    	; 0x230 <Dio_PinWrite+0x112>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <Dio_PinWrite+0x74>
 190:	4a c0       	rjmp	.+148    	; 0x226 <Dio_PinWrite+0x108>
 192:	28 b3       	in	r18, 0x18	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_PinWrite+0x80>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_PinWrite+0x7c>
 1a2:	82 2b       	or	r24, r18
 1a4:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	43 c0       	rjmp	.+134    	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
 1aa:	41 11       	cpse	r20, r1
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <Dio_PinWrite+0xaa>
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_PinWrite+0x9c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_PinWrite+0x98>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	34 c0       	rjmp	.+104    	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	79 f5       	brne	.+94     	; 0x22a <Dio_PinWrite+0x10c>
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <Dio_PinWrite+0xba>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <Dio_PinWrite+0xb6>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	26 c0       	rjmp	.+76     	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
 1e4:	41 11       	cpse	r20, r1
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <Dio_PinWrite+0xe4>
 1e8:	22 b3       	in	r18, 0x12	; 18
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_PinWrite+0xd6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_PinWrite+0xd2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	17 c0       	rjmp	.+46     	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	a1 f4       	brne	.+40     	; 0x22e <Dio_PinWrite+0x110>
 206:	22 b3       	in	r18, 0x12	; 18
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Dio_PinWrite+0xf4>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <Dio_PinWrite+0xf0>
 216:	82 2b       	or	r24, r18
 218:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	09 c0       	rjmp	.+18     	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	07 c0       	rjmp	.+14     	; 0x230 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	05 c0       	rjmp	.+10     	; 0x230 <Dio_PinWrite+0x112>
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	03 c0       	rjmp	.+6      	; 0x230 <Dio_PinWrite+0x112>
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	01 c0       	rjmp	.+2      	; 0x230 <Dio_PinWrite+0x112>
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 22e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 230:	00 00       	nop
	return ReturnValue;
}
 232:	08 95       	ret

00000234 <EEPROM_write>:
#include "STD_Types.h"
#include <avr/io.h>
void EEPROM_write(uint16 Address, uint8 Data)
{
	/* Wait for completion of previous write */
	while(GetBit(EECR,EEWE));
 234:	e1 99       	sbic	0x1c, 1	; 28
 236:	fe cf       	rjmp	.-4      	; 0x234 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = Address;
 238:	9f bb       	out	0x1f, r25	; 31
 23a:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
 23c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	SetBit(EECR,EEMWE);
 23e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SetBit(EECR,EEWE);
 240:	e1 9a       	sbi	0x1c, 1	; 28
 242:	08 95       	ret

00000244 <EEPROM_read>:
}

void EEPROM_read(uint16 Address , uint8* Data)
{
	/* Wait for completion of previous write */
	while(GetBit(EECR,EEWE));
 244:	e1 99       	sbic	0x1c, 1	; 28
 246:	fe cf       	rjmp	.-4      	; 0x244 <EEPROM_read>
	/* Set up address register */
	EEAR = Address;
 248:	9f bb       	out	0x1f, r25	; 31
 24a:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SetBit(EECR,EERE);
 24c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	*Data = EEDR ;
 24e:	8d b3       	in	r24, 0x1d	; 29
 250:	fb 01       	movw	r30, r22
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <__vector_1>:
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	8f 93       	push	r24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 268:	8f 91       	pop	r24
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <LCD_Enable>:
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9c e9       	ldi	r25, 0x9C	; 156
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Enable+0xe>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Enable+0x14>
 288:	00 00       	nop
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 294:	08 95       	ret

00000296 <LCD_Command>:
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 2a4:	6b b3       	in	r22, 0x1b	; 27
 2a6:	8c 2f       	mov	r24, r28
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	6f 70       	andi	r22, 0x0F	; 15
 2ac:	68 2b       	or	r22, r24
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 2b4:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Enable>
 2b8:	6b b3       	in	r22, 0x1b	; 27
 2ba:	20 e1       	ldi	r18, 0x10	; 16
 2bc:	c2 9f       	mul	r28, r18
 2be:	c0 01       	movw	r24, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	6f 70       	andi	r22, 0x0F	; 15
 2c4:	68 2b       	or	r22, r24
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 2cc:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Enable>
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_Init>:
 2d4:	4e e0       	ldi	r20, 0x0E	; 14
 2d6:	6e e0       	ldi	r22, 0x0E	; 14
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 49 00 	call	0x92	; 0x92 <Dio_GroupSetDirection>
 2de:	40 ef       	ldi	r20, 0xF0	; 240
 2e0:	60 ef       	ldi	r22, 0xF0	; 240
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_GroupSetDirection>
 2e8:	83 e3       	ldi	r24, 0x33	; 51
 2ea:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 2ee:	82 e3       	ldi	r24, 0x32	; 50
 2f0:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 30c:	08 95       	ret

0000030e <LCD_Data>:
 30e:	cf 93       	push	r28
 310:	c8 2f       	mov	r28, r24
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 31c:	6b b3       	in	r22, 0x1b	; 27
 31e:	8c 2f       	mov	r24, r28
 320:	80 7f       	andi	r24, 0xF0	; 240
 322:	6f 70       	andi	r22, 0x0F	; 15
 324:	68 2b       	or	r22, r24
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 32c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Enable>
 330:	6b b3       	in	r22, 0x1b	; 27
 332:	20 e1       	ldi	r18, 0x10	; 16
 334:	c2 9f       	mul	r28, r18
 336:	c0 01       	movw	r24, r0
 338:	11 24       	eor	r1, r1
 33a:	6f 70       	andi	r22, 0x0F	; 15
 33c:	68 2b       	or	r22, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 344:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Enable>
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_Postion>:
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	19 f0       	breq	.+6      	; 0x356 <LCD_Postion+0xa>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	21 f0       	breq	.+8      	; 0x35c <LCD_Postion+0x10>
 354:	06 c0       	rjmp	.+12     	; 0x362 <LCD_Postion+0x16>
 356:	8f e7       	ldi	r24, 0x7F	; 127
 358:	86 0f       	add	r24, r22
 35a:	04 c0       	rjmp	.+8      	; 0x364 <LCD_Postion+0x18>
 35c:	8f eb       	ldi	r24, 0xBF	; 191
 35e:	86 0f       	add	r24, r22
 360:	01 c0       	rjmp	.+2      	; 0x364 <LCD_Postion+0x18>
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Command>
 368:	08 95       	ret

0000036a <main>:
#include "LCD.h"
#include "StringHandler.h"
#include "EEPROM.h"

int main(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	1f 92       	push	r1
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	uint8 ReadValue = 0x00 ;
 374:	19 82       	std	Y+1, r1	; 0x01
	uint8 ReadValueString[3]={0};
	LCD_Init();
 376:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_Init>
	EEPROM_write(0x00,'H');
 37a:	68 e4       	ldi	r22, 0x48	; 72
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_write>
	EEPROM_write(0x01,'E');
 384:	65 e4       	ldi	r22, 0x45	; 69
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_write>
	EEPROM_write(0x02,'L');
 38e:	6c e4       	ldi	r22, 0x4C	; 76
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_write>
	EEPROM_write(0x03,'L');
 398:	6c e4       	ldi	r22, 0x4C	; 76
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_write>
	EEPROM_write(0x04,'O');
 3a2:	6f e4       	ldi	r22, 0x4F	; 79
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 1a 01 	call	0x234	; 0x234 <EEPROM_write>
	LCD_Postion(1,1);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Postion>
	EEPROM_read(0x00,&ReadValue);
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	81 ee       	ldi	r24, 0xE1	; 225
 3c6:	94 e0       	ldi	r25, 0x04	; 4
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x5e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x68>
 3d2:	00 00       	nop
	_delay_ms(100);
	LCD_Data(ReadValue);
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Data>
	EEPROM_read(0x01,&ReadValue);
 3da:	be 01       	movw	r22, r28
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_read>
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	81 ee       	ldi	r24, 0xE1	; 225
 3ec:	94 e0       	ldi	r25, 0x04	; 4
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0x84>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x8e>
 3f8:	00 00       	nop
	_delay_ms(100);
	LCD_Data(ReadValue);
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Data>
	EEPROM_read(0x02,&ReadValue);
 400:	be 01       	movw	r22, r28
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_read>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	81 ee       	ldi	r24, 0xE1	; 225
 412:	94 e0       	ldi	r25, 0x04	; 4
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_ms(100);
	LCD_Data(ReadValue);
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Data>
	EEPROM_read(0x03,&ReadValue);
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_read>
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	81 ee       	ldi	r24, 0xE1	; 225
 438:	94 e0       	ldi	r25, 0x04	; 4
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
	_delay_ms(100);
	LCD_Data(ReadValue);
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Data>
	EEPROM_read(0x04,&ReadValue);
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_read>
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	81 ee       	ldi	r24, 0xE1	; 225
 45e:	94 e0       	ldi	r25, 0x04	; 4
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
	_delay_ms(100);
	LCD_Data(ReadValue);
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Data>
 472:	ff cf       	rjmp	.-2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>

00000474 <__vector_12>:
}
#endif

#if (SPIMODE == SLAVE)
ISR(SPI_STC_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
	SPI_Slave_DataReceived = SPDR;
 480:	8f b1       	in	r24, 0x0f	; 15
 482:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SPI_Slave_DataReceived>
	SPDR = SPI_Slave_DataSend;
 486:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPI_Slave_DataSend>
 48a:	8f b9       	out	0x0f, r24	; 15
	
}
 48c:	8f 91       	pop	r24
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_11>:
{
	
}

ISR(TIMER0_OVF_vect)
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
	Timer0_OVF_CB();
}
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
	Timer0_CMP_CB();
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <Timer1_OVF_CB>:
}
void Timer1_OVF_CB(void)
{
	ToggleBit(PORTA,0);
}
void Timer1_CMP_CB(void) {}
 4c0:	9b b3       	in	r25, 0x1b	; 27
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 27       	eor	r24, r25
 4c6:	8b bb       	out	0x1b, r24	; 27
 4c8:	08 95       	ret

000004ca <__vector_9>:
ISR(TIMER1_OVF_vect)
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
	Timer1_OVF_CB();
 4ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Timer1_OVF_CB>
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
