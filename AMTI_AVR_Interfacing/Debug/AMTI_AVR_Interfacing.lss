
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114c  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112d  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00002fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ee  00000000  00000000  000039bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_9>
  28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_10>
  2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  74:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_PinSetDirection>:
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	31 f1       	breq	.+76     	; 0xcc <Dio_PinSetDirection+0x50>
  80:	38 f0       	brcs	.+14     	; 0x90 <Dio_PinSetDirection+0x14>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	09 f4       	brne	.+2      	; 0x88 <Dio_PinSetDirection+0xc>
  86:	40 c0       	rjmp	.+128    	; 0x108 <Dio_PinSetDirection+0x8c>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <Dio_PinSetDirection+0x12>
  8c:	5a c0       	rjmp	.+180    	; 0x142 <Dio_PinSetDirection+0xc6>
  8e:	76 c0       	rjmp	.+236    	; 0x17c <Dio_PinSetDirection+0x100>
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
  90:	41 11       	cpse	r20, r1
  92:	0d c0       	rjmp	.+26     	; 0xae <Dio_PinSetDirection+0x32>
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <Dio_PinSetDirection+0x24>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <Dio_PinSetDirection+0x20>
  a4:	80 95       	com	r24
  a6:	82 23       	and	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	08 95       	ret
	switch (port)
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <Dio_PinSetDirection+0x38>
  b2:	66 c0       	rjmp	.+204    	; 0x180 <Dio_PinSetDirection+0x104>
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <Dio_PinSetDirection+0x44>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <Dio_PinSetDirection+0x40>
  c4:	82 2b       	or	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
		else ReturnValue = NOK ; 
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
  cc:	41 11       	cpse	r20, r1
  ce:	0d c0       	rjmp	.+26     	; 0xea <Dio_PinSetDirection+0x6e>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Dio_PinSetDirection+0x60>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Dio_PinSetDirection+0x5c>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
		else ReturnValue = NOK ; 
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	09 f0       	breq	.+2      	; 0xf0 <Dio_PinSetDirection+0x74>
  ee:	4a c0       	rjmp	.+148    	; 0x184 <Dio_PinSetDirection+0x108>
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Dio_PinSetDirection+0x80>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Dio_PinSetDirection+0x7c>
 100:	82 2b       	or	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
 108:	41 11       	cpse	r20, r1
 10a:	0d c0       	rjmp	.+26     	; 0x126 <Dio_PinSetDirection+0xaa>
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <Dio_PinSetDirection+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <Dio_PinSetDirection+0x98>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	79 f5       	brne	.+94     	; 0x188 <Dio_PinSetDirection+0x10c>
 12a:	24 b3       	in	r18, 0x14	; 20
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_PinSetDirection+0xba>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_PinSetDirection+0xb6>
 13a:	82 2b       	or	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
 142:	41 11       	cpse	r20, r1
 144:	0d c0       	rjmp	.+26     	; 0x160 <Dio_PinSetDirection+0xe4>
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <Dio_PinSetDirection+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <Dio_PinSetDirection+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	a1 f4       	brne	.+40     	; 0x18c <Dio_PinSetDirection+0x110>
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_PinSetDirection+0xf4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_PinSetDirection+0xf0>
 174:	82 2b       	or	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
	switch (port)
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
		else ReturnValue = NOK ; 
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
		else ReturnValue = NOK ;
 18c:	80 e0       	ldi	r24, 0x00	; 0
		ReturnValue = NOK ;
		break;
	}
	//asm	volatile ("nop"); 
	return ReturnValue;
}
 18e:	08 95       	ret

00000190 <__vector_1>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <main>:
// 	 
// 	 SetBit(TCCR1B,CS10);
// 	 ClearBit(TCCR1B,CS11);
// 	 SetBit(TCCR1B,CS12);

SetBit(TCCR2,WGM20); SetBit(TCCR2,WGM21); 
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	85 bd       	out	0x25, r24	; 37
 1b4:	85 b5       	in	r24, 0x25	; 37
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	85 bd       	out	0x25, r24	; 37
ClearBit(TCCR2,COM20); SetBit(TCCR2,COM21) ;
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	85 bd       	out	0x25, r24	; 37
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	85 bd       	out	0x25, r24	; 37
Dio_PinSetDirection(D,7,PinOutput);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	67 e0       	ldi	r22, 0x07	; 7
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_PinSetDirection>
	OCR2 = 12 ;
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	83 bd       	out	0x23, r24	; 35
SetBit(TCCR2,CS22);SetBit(TCCR2,CS21);SetBit(TCCR2,CS20);	 
 1d4:	85 b5       	in	r24, 0x25	; 37
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	85 bd       	out	0x25, r24	; 37
 1da:	85 b5       	in	r24, 0x25	; 37
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	85 bd       	out	0x25, r24	; 37
 1e0:	85 b5       	in	r24, 0x25	; 37
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	85 bd       	out	0x25, r24	; 37
	
	while (1)
	{
	_delay_ms(250);
	OCR2 ++; 
	if(OCR2 == 40) OCR2 = 5 ; 
 1e6:	95 e0       	ldi	r25, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	34 e3       	ldi	r19, 0x34	; 52
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x40>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x4a>
 1f8:	00 00       	nop
SetBit(TCCR2,CS22);SetBit(TCCR2,CS21);SetBit(TCCR2,CS20);	 
	
	while (1)
	{
	_delay_ms(250);
	OCR2 ++; 
 1fa:	83 b5       	in	r24, 0x23	; 35
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	83 bd       	out	0x23, r24	; 35
	if(OCR2 == 40) OCR2 = 5 ; 
 200:	83 b5       	in	r24, 0x23	; 35
 202:	88 32       	cpi	r24, 0x28	; 40
 204:	89 f7       	brne	.-30     	; 0x1e8 <main+0x3a>
 206:	93 bd       	out	0x23, r25	; 35
 208:	ef cf       	rjmp	.-34     	; 0x1e8 <main+0x3a>

0000020a <__vector_11>:
{
	
}

ISR(TIMER0_OVF_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
	Timer0_OVF_CB();
}
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
	Timer0_CMP_CB();
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <Timer1_OVF_CB>:
}
void Timer1_OVF_CB(void)
{
	ToggleBit(PORTA,0);
}
void Timer1_CMP_CB(void) {}
 232:	9b b3       	in	r25, 0x1b	; 27
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 27       	eor	r24, r25
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret

0000023c <__vector_9>:
ISR(TIMER1_OVF_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	Timer1_OVF_CB();
 25e:	0e 94 19 01 	call	0x232	; 0x232 <Timer1_OVF_CB>
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
