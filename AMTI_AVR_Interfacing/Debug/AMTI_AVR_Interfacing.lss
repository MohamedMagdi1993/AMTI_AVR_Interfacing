
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ede  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000743  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebb  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000148f  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_PortSetDirection>:
			 ReturnValue= NOK;		
	}
	asm	volatile ("nop"); 
	return ReturnValue;
	
}
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	49 f0       	breq	.+18     	; 0x92 <Dio_PortSetDirection+0x16>
  80:	28 f0       	brcs	.+10     	; 0x8c <Dio_PortSetDirection+0x10>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	49 f0       	breq	.+18     	; 0x98 <Dio_PortSetDirection+0x1c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	51 f0       	breq	.+20     	; 0x9e <Dio_PortSetDirection+0x22>
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <Dio_PortSetDirection+0x28>
  8c:	6a bb       	out	0x1a, r22	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0a c0       	rjmp	.+20     	; 0xa6 <Dio_PortSetDirection+0x2a>
  92:	67 bb       	out	0x17, r22	; 23
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	07 c0       	rjmp	.+14     	; 0xa6 <Dio_PortSetDirection+0x2a>
  98:	64 bb       	out	0x14, r22	; 20
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <Dio_PortSetDirection+0x2a>
  9e:	61 bb       	out	0x11, r22	; 17
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <Dio_PortSetDirection+0x2a>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <Dio_PortWrite>:
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
	switch (port)
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	49 f0       	breq	.+18     	; 0xc0 <Dio_PortWrite+0x16>
  ae:	28 f0       	brcs	.+10     	; 0xba <Dio_PortWrite+0x10>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	49 f0       	breq	.+18     	; 0xc6 <Dio_PortWrite+0x1c>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	51 f0       	breq	.+20     	; 0xcc <Dio_PortWrite+0x22>
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <Dio_PortWrite+0x28>
	{
		case A:
		PORTA = WriteValue;
  ba:	6b bb       	out	0x1b, r22	; 27
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  bc:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case A:
		PORTA = WriteValue;
		break;
  be:	0a c0       	rjmp	.+20     	; 0xd4 <Dio_PortWrite+0x2a>
		case B:
		PORTB = WriteValue;
  c0:	68 bb       	out	0x18, r22	; 24
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  c2:	81 e0       	ldi	r24, 0x01	; 1
		case A:
		PORTA = WriteValue;
		break;
		case B:
		PORTB = WriteValue;
		break;
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <Dio_PortWrite+0x2a>
		case C:
		PORTC = WriteValue;
  c6:	65 bb       	out	0x15, r22	; 21
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
		case B:
		PORTB = WriteValue;
		break;
		case C:
		PORTC = WriteValue;
		break;
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <Dio_PortWrite+0x2a>
		case D:
		PORTD = WriteValue;
  cc:	62 bb       	out	0x12, r22	; 18
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  ce:	81 e0       	ldi	r24, 0x01	; 1
		case C:
		PORTC = WriteValue;
		break;
		case D:
		PORTD = WriteValue;
		break;
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <Dio_PortWrite+0x2a>
		default:
		ReturnValue = NOK ;
  d2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	asm	volatile ("nop"); 
  d4:	00 00       	nop
	return ReturnValue;
}
  d6:	08 95       	ret

000000d8 <__vector_1>:
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:
#include <avr/interrupt.h>
#include "Dio.h"
#include "Bitwise.h"
int main(void)
{
	Dio_PortSetDirection(D,0xFF) ; // PORT D is output
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_PortSetDirection>
	Dio_PortWrite(D,0x00); // Turn all Leds off 
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 55 00 	call	0xaa	; 0xaa <Dio_PortWrite>
	TCNT0 = 0x00 ;
 106:	12 be       	out	0x32, r1	; 50
	ClearBit(TCCR0,WGM00); ClearBit(TCCR0,WGM01) ; // NormalMode
 108:	83 b7       	in	r24, 0x33	; 51
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	83 bf       	out	0x33, r24	; 51
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	87 7f       	andi	r24, 0xF7	; 247
 112:	83 bf       	out	0x33, r24	; 51
	SetBit(TCCR0,CS00) ; ClearBit(TCCR0,CS01) ; SetBit(TCCR0,CS02) ;
 114:	83 b7       	in	r24, 0x33	; 51
 116:	81 60       	ori	r24, 0x01	; 1
 118:	83 bf       	out	0x33, r24	; 51
 11a:	83 b7       	in	r24, 0x33	; 51
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	83 bf       	out	0x33, r24	; 51
 120:	83 b7       	in	r24, 0x33	; 51
 122:	84 60       	ori	r24, 0x04	; 4
 124:	83 bf       	out	0x33, r24	; 51
	SetBit(TIMSK,TOIE0);
 126:	89 b7       	in	r24, 0x39	; 57
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	89 bf       	out	0x39, r24	; 57
	sei();
 12c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x3c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x42>
 138:	00 00       	nop
 13a:	f9 cf       	rjmp	.-14     	; 0x12e <main+0x38>

0000013c <__vector_11>:
	//	PORTD--;
	}
}

ISR(TIMER0_OVF_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	PORTD++;
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	82 bb       	out	0x12, r24	; 18
	 
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
