
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a41  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb1  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b9  00000000  00000000  00002e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000044c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000861  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c49  00000000  00000000  0000518d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_9>
  28:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_10>
  2c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  8a:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_GroupSetDirection>:
			 ReturnValue= NOK;		
	}
	asm	volatile ("nop"); 
	return ReturnValue;
	
}
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	79 f0       	breq	.+30     	; 0xb4 <Dio_GroupSetDirection+0x22>
  96:	28 f0       	brcs	.+10     	; 0xa2 <Dio_GroupSetDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	a9 f0       	breq	.+42     	; 0xc6 <Dio_GroupSetDirection+0x34>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	e1 f0       	breq	.+56     	; 0xd8 <Dio_GroupSetDirection+0x46>
  a0:	24 c0       	rjmp	.+72     	; 0xea <Dio_GroupSetDirection+0x58>
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	96 2f       	mov	r25, r22
  a6:	90 95       	com	r25
  a8:	89 23       	and	r24, r25
  aa:	64 23       	and	r22, r20
  ac:	68 2b       	or	r22, r24
  ae:	6a bb       	out	0x1a, r22	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	1c c0       	rjmp	.+56     	; 0xec <Dio_GroupSetDirection+0x5a>
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	96 2f       	mov	r25, r22
  b8:	90 95       	com	r25
  ba:	89 23       	and	r24, r25
  bc:	64 23       	and	r22, r20
  be:	68 2b       	or	r22, r24
  c0:	67 bb       	out	0x17, r22	; 23
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	13 c0       	rjmp	.+38     	; 0xec <Dio_GroupSetDirection+0x5a>
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	96 2f       	mov	r25, r22
  ca:	90 95       	com	r25
  cc:	89 23       	and	r24, r25
  ce:	64 23       	and	r22, r20
  d0:	68 2b       	or	r22, r24
  d2:	64 bb       	out	0x14, r22	; 20
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0a c0       	rjmp	.+20     	; 0xec <Dio_GroupSetDirection+0x5a>
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	96 2f       	mov	r25, r22
  dc:	90 95       	com	r25
  de:	89 23       	and	r24, r25
  e0:	64 23       	and	r22, r20
  e2:	68 2b       	or	r22, r24
  e4:	61 bb       	out	0x11, r22	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <Dio_GroupSetDirection+0x5a>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <Dio_PortWrite>:
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
	switch (port)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	49 f0       	breq	.+18     	; 0x106 <Dio_PortWrite+0x16>
  f4:	28 f0       	brcs	.+10     	; 0x100 <Dio_PortWrite+0x10>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	49 f0       	breq	.+18     	; 0x10c <Dio_PortWrite+0x1c>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	51 f0       	breq	.+20     	; 0x112 <Dio_PortWrite+0x22>
  fe:	0c c0       	rjmp	.+24     	; 0x118 <Dio_PortWrite+0x28>
	{
		case A:
		PORTA = WriteValue;
 100:	6b bb       	out	0x1b, r22	; 27
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 102:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case A:
		PORTA = WriteValue;
		break;
 104:	0a c0       	rjmp	.+20     	; 0x11a <Dio_PortWrite+0x2a>
		case B:
		PORTB = WriteValue;
 106:	68 bb       	out	0x18, r22	; 24
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 108:	81 e0       	ldi	r24, 0x01	; 1
		case A:
		PORTA = WriteValue;
		break;
		case B:
		PORTB = WriteValue;
		break;
 10a:	07 c0       	rjmp	.+14     	; 0x11a <Dio_PortWrite+0x2a>
		case C:
		PORTC = WriteValue;
 10c:	65 bb       	out	0x15, r22	; 21
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 10e:	81 e0       	ldi	r24, 0x01	; 1
		case B:
		PORTB = WriteValue;
		break;
		case C:
		PORTC = WriteValue;
		break;
 110:	04 c0       	rjmp	.+8      	; 0x11a <Dio_PortWrite+0x2a>
		case D:
		PORTD = WriteValue;
 112:	62 bb       	out	0x12, r22	; 18
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 114:	81 e0       	ldi	r24, 0x01	; 1
		case C:
		PORTC = WriteValue;
		break;
		case D:
		PORTD = WriteValue;
		break;
 116:	01 c0       	rjmp	.+2      	; 0x11a <Dio_PortWrite+0x2a>
		default:
		ReturnValue = NOK ;
 118:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	asm	volatile ("nop"); 
 11a:	00 00       	nop
	return ReturnValue;
}
 11c:	08 95       	ret

0000011e <Dio_PinWrite>:
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	31 f1       	breq	.+76     	; 0x16e <Dio_PinWrite+0x50>
 122:	38 f0       	brcs	.+14     	; 0x132 <Dio_PinWrite+0x14>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	09 f4       	brne	.+2      	; 0x12a <Dio_PinWrite+0xc>
 128:	40 c0       	rjmp	.+128    	; 0x1aa <Dio_PinWrite+0x8c>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	09 f4       	brne	.+2      	; 0x130 <Dio_PinWrite+0x12>
 12e:	5a c0       	rjmp	.+180    	; 0x1e4 <Dio_PinWrite+0xc6>
 130:	76 c0       	rjmp	.+236    	; 0x21e <Dio_PinWrite+0x100>
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
 132:	41 11       	cpse	r20, r1
 134:	0d c0       	rjmp	.+26     	; 0x150 <Dio_PinWrite+0x32>
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Dio_PinWrite+0x24>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <Dio_PinWrite+0x20>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	70 c0       	rjmp	.+224    	; 0x230 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	09 f0       	breq	.+2      	; 0x156 <Dio_PinWrite+0x38>
 154:	66 c0       	rjmp	.+204    	; 0x222 <Dio_PinWrite+0x104>
 156:	2b b3       	in	r18, 0x1b	; 27
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_PinWrite+0x44>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_PinWrite+0x40>
 166:	82 2b       	or	r24, r18
 168:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	61 c0       	rjmp	.+194    	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
 16e:	41 11       	cpse	r20, r1
 170:	0d c0       	rjmp	.+26     	; 0x18c <Dio_PinWrite+0x6e>
 172:	28 b3       	in	r18, 0x18	; 24
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_PinWrite+0x60>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_PinWrite+0x5c>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	52 c0       	rjmp	.+164    	; 0x230 <Dio_PinWrite+0x112>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <Dio_PinWrite+0x74>
 190:	4a c0       	rjmp	.+148    	; 0x226 <Dio_PinWrite+0x108>
 192:	28 b3       	in	r18, 0x18	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_PinWrite+0x80>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_PinWrite+0x7c>
 1a2:	82 2b       	or	r24, r18
 1a4:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	43 c0       	rjmp	.+134    	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
 1aa:	41 11       	cpse	r20, r1
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <Dio_PinWrite+0xaa>
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_PinWrite+0x9c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_PinWrite+0x98>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	34 c0       	rjmp	.+104    	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	79 f5       	brne	.+94     	; 0x22a <Dio_PinWrite+0x10c>
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <Dio_PinWrite+0xba>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <Dio_PinWrite+0xb6>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	26 c0       	rjmp	.+76     	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
 1e4:	41 11       	cpse	r20, r1
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <Dio_PinWrite+0xe4>
 1e8:	22 b3       	in	r18, 0x12	; 18
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_PinWrite+0xd6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_PinWrite+0xd2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	17 c0       	rjmp	.+46     	; 0x230 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	a1 f4       	brne	.+40     	; 0x22e <Dio_PinWrite+0x110>
 206:	22 b3       	in	r18, 0x12	; 18
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Dio_PinWrite+0xf4>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <Dio_PinWrite+0xf0>
 216:	82 2b       	or	r24, r18
 218:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	09 c0       	rjmp	.+18     	; 0x230 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	07 c0       	rjmp	.+14     	; 0x230 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	05 c0       	rjmp	.+10     	; 0x230 <Dio_PinWrite+0x112>
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	03 c0       	rjmp	.+6      	; 0x230 <Dio_PinWrite+0x112>
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	01 c0       	rjmp	.+2      	; 0x230 <Dio_PinWrite+0x112>
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 22e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 230:	00 00       	nop
	return ReturnValue;
}
 232:	08 95       	ret

00000234 <I2C_Init>:
#include <avr/io.h>
#include "STD_Types.h"
#include "Bitwise.h"
void I2C_Init(void)
{
	TWSR = 0x00 ;
 234:	11 b8       	out	0x01, r1	; 1
	TWBR = 12;
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN) ;
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	86 bf       	out	0x36, r24	; 54
 23e:	08 95       	ret

00000240 <I2C_Start>:
}
void I2C_Start(void)
{
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA) ;
 240:	84 ea       	ldi	r24, 0xA4	; 164
 242:	86 bf       	out	0x36, r24	; 54
	while(!GetBit(TWCR,TWINT)) ;
 244:	06 b6       	in	r0, 0x36	; 54
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <I2C_Start+0x4>
}
 24a:	08 95       	ret

0000024c <I2C_Stop>:

void I2C_Stop(void)
{
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO) ;
 24c:	84 e9       	ldi	r24, 0x94	; 148
 24e:	86 bf       	out	0x36, r24	; 54
 250:	08 95       	ret

00000252 <I2C_Write>:
}
void I2C_Write(uint8 u8Write)
{
	TWDR = u8Write ; 
 252:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN) | (1<<TWINT);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	86 bf       	out	0x36, r24	; 54
	while(!GetBit(TWCR,TWINT)) ;
 258:	06 b6       	in	r0, 0x36	; 54
 25a:	07 fe       	sbrs	r0, 7
 25c:	fd cf       	rjmp	.-6      	; 0x258 <I2C_Write+0x6>
}
 25e:	08 95       	ret

00000260 <I2C_Read>:
void I2C_Read(uint8 * U8Read)
{
	TWCR = (1<<TWEN) | (1<<TWINT);
 260:	24 e8       	ldi	r18, 0x84	; 132
 262:	26 bf       	out	0x36, r18	; 54
	while(!GetBit(TWCR,TWINT)) ;
 264:	06 b6       	in	r0, 0x36	; 54
 266:	07 fe       	sbrs	r0, 7
 268:	fd cf       	rjmp	.-6      	; 0x264 <I2C_Read+0x4>
	*U8Read = TWDR ;
 26a:	23 b1       	in	r18, 0x03	; 3
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	08 95       	ret

00000272 <__vector_1>:
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	8f 93       	push	r24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <LCD_Enable>:
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	9c e9       	ldi	r25, 0x9C	; 156
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Enable+0xe>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_Enable+0x14>
 2a4:	00 00       	nop
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 2b0:	08 95       	ret

000002b2 <LCD_Command>:
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 2c0:	6b b3       	in	r22, 0x1b	; 27
 2c2:	8c 2f       	mov	r24, r28
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	6f 70       	andi	r22, 0x0F	; 15
 2c8:	68 2b       	or	r22, r24
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 2d0:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Enable>
 2d4:	6b b3       	in	r22, 0x1b	; 27
 2d6:	20 e1       	ldi	r18, 0x10	; 16
 2d8:	c2 9f       	mul	r28, r18
 2da:	c0 01       	movw	r24, r0
 2dc:	11 24       	eor	r1, r1
 2de:	6f 70       	andi	r22, 0x0F	; 15
 2e0:	68 2b       	or	r22, r24
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 2e8:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Enable>
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <LCD_Init>:
 2f0:	4e e0       	ldi	r20, 0x0E	; 14
 2f2:	6e e0       	ldi	r22, 0x0E	; 14
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_GroupSetDirection>
 2fa:	40 ef       	ldi	r20, 0xF0	; 240
 2fc:	60 ef       	ldi	r22, 0xF0	; 240
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 49 00 	call	0x92	; 0x92 <Dio_GroupSetDirection>
 304:	83 e3       	ldi	r24, 0x33	; 51
 306:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 30a:	82 e3       	ldi	r24, 0x32	; 50
 30c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 310:	88 e2       	ldi	r24, 0x28	; 40
 312:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 328:	08 95       	ret

0000032a <LCD_Data>:
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_PinWrite>
 338:	6b b3       	in	r22, 0x1b	; 27
 33a:	8c 2f       	mov	r24, r28
 33c:	80 7f       	andi	r24, 0xF0	; 240
 33e:	6f 70       	andi	r22, 0x0F	; 15
 340:	68 2b       	or	r22, r24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 348:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Enable>
 34c:	6b b3       	in	r22, 0x1b	; 27
 34e:	20 e1       	ldi	r18, 0x10	; 16
 350:	c2 9f       	mul	r28, r18
 352:	c0 01       	movw	r24, r0
 354:	11 24       	eor	r1, r1
 356:	6f 70       	andi	r22, 0x0F	; 15
 358:	68 2b       	or	r22, r24
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_PortWrite>
 360:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Enable>
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <LCD_DataString>:
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
 36e:	88 81       	ld	r24, Y
 370:	88 23       	and	r24, r24
 372:	31 f0       	breq	.+12     	; 0x380 <LCD_DataString+0x18>
 374:	21 96       	adiw	r28, 0x01	; 1
 376:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Data>
 37a:	89 91       	ld	r24, Y+
 37c:	81 11       	cpse	r24, r1
 37e:	fb cf       	rjmp	.-10     	; 0x376 <LCD_DataString+0xe>
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_Postion>:
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	19 f0       	breq	.+6      	; 0x390 <LCD_Postion+0xa>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	21 f0       	breq	.+8      	; 0x396 <LCD_Postion+0x10>
 38e:	06 c0       	rjmp	.+12     	; 0x39c <LCD_Postion+0x16>
 390:	8f e7       	ldi	r24, 0x7F	; 127
 392:	86 0f       	add	r24, r22
 394:	04 c0       	rjmp	.+8      	; 0x39e <LCD_Postion+0x18>
 396:	8f eb       	ldi	r24, 0xBF	; 191
 398:	86 0f       	add	r24, r22
 39a:	01 c0       	rjmp	.+2      	; 0x39e <LCD_Postion+0x18>
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_Command>
 3a2:	08 95       	ret

000003a4 <main>:
#include "StringHandler.h"
#include "I2C.h"
#define EEPROM_ADDRESS 0b1010000

int main(void)
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <main+0x6>
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <main+0x8>
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	uint8 ReadValue = 0xAA ;
 3b0:	8a ea       	ldi	r24, 0xAA	; 170
 3b2:	89 83       	std	Y+1, r24	; 0x01
	uint8 ReadValueString[3]={0};
 3b4:	1a 82       	std	Y+2, r1	; 0x02
 3b6:	1b 82       	std	Y+3, r1	; 0x03
 3b8:	1c 82       	std	Y+4, r1	; 0x04
	LCD_Init();
 3ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Init>
	I2C_Init();
 3be:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_Init>
	I2C_Start();
 3c2:	0e 94 20 01 	call	0x240	; 0x240 <I2C_Start>
	I2C_Write((EEPROM_ADDRESS<<1)|0);
 3c6:	80 ea       	ldi	r24, 0xA0	; 160
 3c8:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
	I2C_Write(0x00);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
	I2C_Write(0x77);
 3d2:	87 e7       	ldi	r24, 0x77	; 119
 3d4:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
	I2C_Stop();
 3d8:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Stop>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	83 ed       	ldi	r24, 0xD3	; 211
 3e0:	90 e3       	ldi	r25, 0x30	; 48
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x3e>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x48>
 3ec:	00 00       	nop
	while (1)
	{
		
		_delay_ms(1000);
		I2C_Start();
 3ee:	0e 94 20 01 	call	0x240	; 0x240 <I2C_Start>
		I2C_Write((EEPROM_ADDRESS<<1)|0);
 3f2:	80 ea       	ldi	r24, 0xA0	; 160
 3f4:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
		I2C_Write(0x00);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
		I2C_Start();
 3fe:	0e 94 20 01 	call	0x240	; 0x240 <I2C_Start>
		I2C_Write((EEPROM_ADDRESS<<1)|1);
 402:	81 ea       	ldi	r24, 0xA1	; 161
 404:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Write>
		I2C_Read(&ReadValue);
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	0e 94 30 01 	call	0x260	; 0x260 <I2C_Read>
		I2C_Stop();
 410:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_Stop>
		U8HEX2String(ReadValue,ReadValueString);
 414:	be 01       	movw	r22, r28
 416:	6e 5f       	subi	r22, 0xFE	; 254
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	0e 94 19 02 	call	0x432	; 0x432 <U8HEX2String>
		LCD_Postion(1,1);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Postion>
		LCD_DataString(ReadValueString);
 428:	ce 01       	movw	r24, r28
 42a:	02 96       	adiw	r24, 0x02	; 2
 42c:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DataString>
 430:	d5 cf       	rjmp	.-86     	; 0x3dc <main+0x38>

00000432 <U8HEX2String>:
*  Author: Mohamed Magdi
*/
#include "StringHandler.h"

ReturnValueType U8HEX2String (uint8 HEX,uint8 string[3])
{
 432:	fb 01       	movw	r30, r22
	/*
	Ex: HEX = 0x2F
	String = "2F"
	*/
	string[2] = 0 ;
 434:	12 82       	std	Z+2, r1	; 0x02
 436:	98 2f       	mov	r25, r24
 438:	9f 70       	andi	r25, 0x0F	; 15
	if ((HEX & 0x0F) > 9)
 43a:	29 2f       	mov	r18, r25
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	2a 30       	cpi	r18, 0x0A	; 10
 440:	31 05       	cpc	r19, r1
 442:	1c f0       	brlt	.+6      	; 0x44a <U8HEX2String+0x18>
	{
		string[1] =(HEX & 0x0F) - 0x0A + 'A' ;
 444:	99 5c       	subi	r25, 0xC9	; 201
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	02 c0       	rjmp	.+4      	; 0x44e <U8HEX2String+0x1c>
	}
	else
	{
		string[1] =(HEX & 0x0F) + '0' ;
 44a:	90 5d       	subi	r25, 0xD0	; 208
 44c:	91 83       	std	Z+1, r25	; 0x01
	}
	if ((HEX >> 4) > 9)
 44e:	82 95       	swap	r24
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	8a 30       	cpi	r24, 0x0A	; 10
 454:	18 f0       	brcs	.+6      	; 0x45c <U8HEX2String+0x2a>
	{
		string[0] =(HEX>>4 & 0x0F) - 0x0A + 'A' ;
 456:	89 5c       	subi	r24, 0xC9	; 201
 458:	80 83       	st	Z, r24
 45a:	02 c0       	rjmp	.+4      	; 0x460 <U8HEX2String+0x2e>
	}
	else
	{
		string[0] =(HEX>>4 & 0x0F) + 0x30 ;
 45c:	80 5d       	subi	r24, 0xD0	; 208
 45e:	80 83       	st	Z, r24
	}
	
	return OK;
	
	
}
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <__vector_11>:
{
	
}

ISR(TIMER0_OVF_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
	Timer0_OVF_CB();
}
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
	Timer0_CMP_CB();
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <Timer1_OVF_CB>:
}
void Timer1_OVF_CB(void)
{
	ToggleBit(PORTA,0);
}
void Timer1_CMP_CB(void) {}
 48c:	9b b3       	in	r25, 0x1b	; 27
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	89 27       	eor	r24, r25
 492:	8b bb       	out	0x1b, r24	; 27
 494:	08 95       	ret

00000496 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	Timer1_OVF_CB();
 4b8:	0e 94 46 02 	call	0x48c	; 0x48c <Timer1_OVF_CB>
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
