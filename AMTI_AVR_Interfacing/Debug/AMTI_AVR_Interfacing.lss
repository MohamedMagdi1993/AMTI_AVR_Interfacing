
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d5  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000123a  00000000  00000000  000027b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000039f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f1  00000000  00000000  0000441a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005c0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  74:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Adc_Init>:
// 	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
// 	SetBit(ADMUX,REFS0) ;
// 	ClearBit(ADMUX,REFS1);
// 	SetBit(ADMUX,MUX0);
// 	ADMUX &= ~ (1<<MUX1) & ~ (1<<MUX2) & ~ (1<<MUX3) & ~ (1<<MUX4);
	ADCSRA |= (1<<ADEN) ;
  7c:	37 9a       	sbi	0x06, 7	; 6
 	SetBit(ADMUX,REFS0) ;
  7e:	3e 9a       	sbi	0x07, 6	; 7
 	ClearBit(ADMUX,REFS1);
  80:	3f 98       	cbi	0x07, 7	; 7
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 60       	ori	r24, 0x07	; 7
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <Adc_ChannelInit>:
}

void Adc_ChannelInit(uint8 ADC_Channel)
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
	
			Dio_PinSetDirection(A,ADC_Channel,PinInput);
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	68 2f       	mov	r22, r24
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 60 00 	call	0xc0	; 0xc0 <Dio_PinSetDirection>
			ADMUX= (ADMUX & ~0x1F) | (ADC_Channel & 0x1F) ;
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 7e       	andi	r24, 0xE0	; 224
  9c:	cf 71       	andi	r28, 0x1F	; 31
  9e:	c8 2b       	or	r28, r24
  a0:	c7 b9       	out	0x07, r28	; 7
	
}
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <Adc_ReadChannel>:
void Adc_ReadChannel(uint8 ADC_Channel , uint16* Adc_Data)
{
	ADCSRA |= (1<<ADSC) ;
  a6:	36 9a       	sbi	0x06, 6	; 6
	while (GetBit(ADCSRA,ADIF) == 0);
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <Adc_ReadChannel+0x2>
	*Adc_Data = ADCL ;
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fb 01       	movw	r30, r22
  b2:	91 83       	std	Z+1, r25	; 0x01
  b4:	80 83       	st	Z, r24
	*Adc_Data |= (uint16) (ADCH<<8) ;
  b6:	25 b1       	in	r18, 0x05	; 5
  b8:	92 2b       	or	r25, r18
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <Dio_PinSetDirection>:
			 ReturnValue= NOK;		
	}
	asm	volatile ("nop"); 
	return ReturnValue;
	
}
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	31 f1       	breq	.+76     	; 0x110 <Dio_PinSetDirection+0x50>
  c4:	38 f0       	brcs	.+14     	; 0xd4 <Dio_PinSetDirection+0x14>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	09 f4       	brne	.+2      	; 0xcc <Dio_PinSetDirection+0xc>
  ca:	40 c0       	rjmp	.+128    	; 0x14c <Dio_PinSetDirection+0x8c>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f4       	brne	.+2      	; 0xd2 <Dio_PinSetDirection+0x12>
  d0:	5a c0       	rjmp	.+180    	; 0x186 <Dio_PinSetDirection+0xc6>
  d2:	76 c0       	rjmp	.+236    	; 0x1c0 <Dio_PinSetDirection+0x100>
  d4:	41 11       	cpse	r20, r1
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <Dio_PinSetDirection+0x32>
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Dio_PinSetDirection+0x24>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Dio_PinSetDirection+0x20>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	70 c0       	rjmp	.+224    	; 0x1d2 <Dio_PinSetDirection+0x112>
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	09 f0       	breq	.+2      	; 0xf8 <Dio_PinSetDirection+0x38>
  f6:	66 c0       	rjmp	.+204    	; 0x1c4 <Dio_PinSetDirection+0x104>
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_PinSetDirection+0x44>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_PinSetDirection+0x40>
 108:	82 2b       	or	r24, r18
 10a:	8a bb       	out	0x1a, r24	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	61 c0       	rjmp	.+194    	; 0x1d2 <Dio_PinSetDirection+0x112>
 110:	41 11       	cpse	r20, r1
 112:	0d c0       	rjmp	.+26     	; 0x12e <Dio_PinSetDirection+0x6e>
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Dio_PinSetDirection+0x60>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <Dio_PinSetDirection+0x5c>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	52 c0       	rjmp	.+164    	; 0x1d2 <Dio_PinSetDirection+0x112>
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	09 f0       	breq	.+2      	; 0x134 <Dio_PinSetDirection+0x74>
 132:	4a c0       	rjmp	.+148    	; 0x1c8 <Dio_PinSetDirection+0x108>
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_PinSetDirection+0x80>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_PinSetDirection+0x7c>
 144:	82 2b       	or	r24, r18
 146:	87 bb       	out	0x17, r24	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	43 c0       	rjmp	.+134    	; 0x1d2 <Dio_PinSetDirection+0x112>
 14c:	41 11       	cpse	r20, r1
 14e:	0d c0       	rjmp	.+26     	; 0x16a <Dio_PinSetDirection+0xaa>
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <Dio_PinSetDirection+0x9c>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Dio_PinSetDirection+0x98>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	84 bb       	out	0x14, r24	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	34 c0       	rjmp	.+104    	; 0x1d2 <Dio_PinSetDirection+0x112>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	79 f5       	brne	.+94     	; 0x1cc <Dio_PinSetDirection+0x10c>
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_PinSetDirection+0xba>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_PinSetDirection+0xb6>
 17e:	82 2b       	or	r24, r18
 180:	84 bb       	out	0x14, r24	; 20
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	26 c0       	rjmp	.+76     	; 0x1d2 <Dio_PinSetDirection+0x112>
 186:	41 11       	cpse	r20, r1
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <Dio_PinSetDirection+0xe4>
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <Dio_PinSetDirection+0xd6>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <Dio_PinSetDirection+0xd2>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	81 bb       	out	0x11, r24	; 17
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <Dio_PinSetDirection+0x112>
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	a1 f4       	brne	.+40     	; 0x1d0 <Dio_PinSetDirection+0x110>
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_PinSetDirection+0xf4>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_PinSetDirection+0xf0>
 1b8:	82 2b       	or	r24, r18
 1ba:	81 bb       	out	0x11, r24	; 17
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <Dio_PinSetDirection+0x112>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <Dio_PinSetDirection+0x112>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <Dio_PinSetDirection+0x112>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <Dio_PinSetDirection+0x112>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <Dio_PinSetDirection+0x112>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <Dio_GroupSetDirection>:
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	79 f0       	breq	.+30     	; 0x1f8 <Dio_GroupSetDirection+0x22>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <Dio_GroupSetDirection+0x10>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	a9 f0       	breq	.+42     	; 0x20a <Dio_GroupSetDirection+0x34>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	e1 f0       	breq	.+56     	; 0x21c <Dio_GroupSetDirection+0x46>
 1e4:	24 c0       	rjmp	.+72     	; 0x22e <Dio_GroupSetDirection+0x58>
 1e6:	8a b3       	in	r24, 0x1a	; 26
 1e8:	96 2f       	mov	r25, r22
 1ea:	90 95       	com	r25
 1ec:	89 23       	and	r24, r25
 1ee:	64 23       	and	r22, r20
 1f0:	68 2b       	or	r22, r24
 1f2:	6a bb       	out	0x1a, r22	; 26
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	1c c0       	rjmp	.+56     	; 0x230 <Dio_GroupSetDirection+0x5a>
 1f8:	87 b3       	in	r24, 0x17	; 23
 1fa:	96 2f       	mov	r25, r22
 1fc:	90 95       	com	r25
 1fe:	89 23       	and	r24, r25
 200:	64 23       	and	r22, r20
 202:	68 2b       	or	r22, r24
 204:	67 bb       	out	0x17, r22	; 23
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	13 c0       	rjmp	.+38     	; 0x230 <Dio_GroupSetDirection+0x5a>
 20a:	84 b3       	in	r24, 0x14	; 20
 20c:	96 2f       	mov	r25, r22
 20e:	90 95       	com	r25
 210:	89 23       	and	r24, r25
 212:	64 23       	and	r22, r20
 214:	68 2b       	or	r22, r24
 216:	64 bb       	out	0x14, r22	; 20
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0a c0       	rjmp	.+20     	; 0x230 <Dio_GroupSetDirection+0x5a>
 21c:	81 b3       	in	r24, 0x11	; 17
 21e:	96 2f       	mov	r25, r22
 220:	90 95       	com	r25
 222:	89 23       	and	r24, r25
 224:	64 23       	and	r22, r20
 226:	68 2b       	or	r22, r24
 228:	61 bb       	out	0x11, r22	; 17
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <Dio_GroupSetDirection+0x5a>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <Dio_PortWrite>:
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
	switch (port)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	49 f0       	breq	.+18     	; 0x24a <Dio_PortWrite+0x16>
 238:	28 f0       	brcs	.+10     	; 0x244 <Dio_PortWrite+0x10>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	49 f0       	breq	.+18     	; 0x250 <Dio_PortWrite+0x1c>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	51 f0       	breq	.+20     	; 0x256 <Dio_PortWrite+0x22>
 242:	0c c0       	rjmp	.+24     	; 0x25c <Dio_PortWrite+0x28>
	{
		case A:
		PORTA = WriteValue;
 244:	6b bb       	out	0x1b, r22	; 27
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 246:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case A:
		PORTA = WriteValue;
		break;
 248:	0a c0       	rjmp	.+20     	; 0x25e <Dio_PortWrite+0x2a>
		case B:
		PORTB = WriteValue;
 24a:	68 bb       	out	0x18, r22	; 24
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		case A:
		PORTA = WriteValue;
		break;
		case B:
		PORTB = WriteValue;
		break;
 24e:	07 c0       	rjmp	.+14     	; 0x25e <Dio_PortWrite+0x2a>
		case C:
		PORTC = WriteValue;
 250:	65 bb       	out	0x15, r22	; 21
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 252:	81 e0       	ldi	r24, 0x01	; 1
		case B:
		PORTB = WriteValue;
		break;
		case C:
		PORTC = WriteValue;
		break;
 254:	04 c0       	rjmp	.+8      	; 0x25e <Dio_PortWrite+0x2a>
		case D:
		PORTD = WriteValue;
 256:	62 bb       	out	0x12, r22	; 18
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
 258:	81 e0       	ldi	r24, 0x01	; 1
		case C:
		PORTC = WriteValue;
		break;
		case D:
		PORTD = WriteValue;
		break;
 25a:	01 c0       	rjmp	.+2      	; 0x25e <Dio_PortWrite+0x2a>
		default:
		ReturnValue = NOK ;
 25c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	asm	volatile ("nop"); 
 25e:	00 00       	nop
	return ReturnValue;
}
 260:	08 95       	ret

00000262 <Dio_PinWrite>:
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	31 f1       	breq	.+76     	; 0x2b2 <Dio_PinWrite+0x50>
 266:	38 f0       	brcs	.+14     	; 0x276 <Dio_PinWrite+0x14>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	09 f4       	brne	.+2      	; 0x26e <Dio_PinWrite+0xc>
 26c:	40 c0       	rjmp	.+128    	; 0x2ee <Dio_PinWrite+0x8c>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	09 f4       	brne	.+2      	; 0x274 <Dio_PinWrite+0x12>
 272:	5a c0       	rjmp	.+180    	; 0x328 <Dio_PinWrite+0xc6>
 274:	76 c0       	rjmp	.+236    	; 0x362 <Dio_PinWrite+0x100>
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
 276:	41 11       	cpse	r20, r1
 278:	0d c0       	rjmp	.+26     	; 0x294 <Dio_PinWrite+0x32>
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_PinWrite+0x24>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_PinWrite+0x20>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	70 c0       	rjmp	.+224    	; 0x374 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	09 f0       	breq	.+2      	; 0x29a <Dio_PinWrite+0x38>
 298:	66 c0       	rjmp	.+204    	; 0x366 <Dio_PinWrite+0x104>
 29a:	2b b3       	in	r18, 0x1b	; 27
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Dio_PinWrite+0x44>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <Dio_PinWrite+0x40>
 2aa:	82 2b       	or	r24, r18
 2ac:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	61 c0       	rjmp	.+194    	; 0x374 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
 2b2:	41 11       	cpse	r20, r1
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <Dio_PinWrite+0x6e>
 2b6:	28 b3       	in	r18, 0x18	; 24
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Dio_PinWrite+0x60>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <Dio_PinWrite+0x5c>
 2c6:	80 95       	com	r24
 2c8:	82 23       	and	r24, r18
 2ca:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	52 c0       	rjmp	.+164    	; 0x374 <Dio_PinWrite+0x112>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <Dio_PinWrite+0x74>
 2d4:	4a c0       	rjmp	.+148    	; 0x36a <Dio_PinWrite+0x108>
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <Dio_PinWrite+0x80>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <Dio_PinWrite+0x7c>
 2e6:	82 2b       	or	r24, r18
 2e8:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	43 c0       	rjmp	.+134    	; 0x374 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
 2ee:	41 11       	cpse	r20, r1
 2f0:	0d c0       	rjmp	.+26     	; 0x30c <Dio_PinWrite+0xaa>
 2f2:	25 b3       	in	r18, 0x15	; 21
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <Dio_PinWrite+0x9c>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <Dio_PinWrite+0x98>
 302:	80 95       	com	r24
 304:	82 23       	and	r24, r18
 306:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	34 c0       	rjmp	.+104    	; 0x374 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
 30c:	41 30       	cpi	r20, 0x01	; 1
 30e:	79 f5       	brne	.+94     	; 0x36e <Dio_PinWrite+0x10c>
 310:	25 b3       	in	r18, 0x15	; 21
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <Dio_PinWrite+0xba>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <Dio_PinWrite+0xb6>
 320:	82 2b       	or	r24, r18
 322:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	26 c0       	rjmp	.+76     	; 0x374 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
 328:	41 11       	cpse	r20, r1
 32a:	0d c0       	rjmp	.+26     	; 0x346 <Dio_PinWrite+0xe4>
 32c:	22 b3       	in	r18, 0x12	; 18
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <Dio_PinWrite+0xd6>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <Dio_PinWrite+0xd2>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	17 c0       	rjmp	.+46     	; 0x374 <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	a1 f4       	brne	.+40     	; 0x372 <Dio_PinWrite+0x110>
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <Dio_PinWrite+0xf4>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <Dio_PinWrite+0xf0>
 35a:	82 2b       	or	r24, r18
 35c:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	09 c0       	rjmp	.+18     	; 0x374 <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	07 c0       	rjmp	.+14     	; 0x374 <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	05 c0       	rjmp	.+10     	; 0x374 <Dio_PinWrite+0x112>
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	03 c0       	rjmp	.+6      	; 0x374 <Dio_PinWrite+0x112>
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	01 c0       	rjmp	.+2      	; 0x374 <Dio_PinWrite+0x112>
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 372:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 374:	00 00       	nop
	return ReturnValue;
}
 376:	08 95       	ret

00000378 <__vector_1>:
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	8f 93       	push	r24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <LCD_Enable>:
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	63 e0       	ldi	r22, 0x03	; 3
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 31 01 	call	0x262	; 0x262 <Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	9c e9       	ldi	r25, 0x9C	; 156
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_Enable+0xe>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_Enable+0x14>
 3aa:	00 00       	nop
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 31 01 	call	0x262	; 0x262 <Dio_PinWrite>
 3b6:	08 95       	ret

000003b8 <LCD_Command>:
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 31 01 	call	0x262	; 0x262 <Dio_PinWrite>
 3c6:	6b b3       	in	r22, 0x1b	; 27
 3c8:	8c 2f       	mov	r24, r28
 3ca:	80 7f       	andi	r24, 0xF0	; 240
 3cc:	6f 70       	andi	r22, 0x0F	; 15
 3ce:	68 2b       	or	r22, r24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 1a 01 	call	0x234	; 0x234 <Dio_PortWrite>
 3d6:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Enable>
 3da:	6b b3       	in	r22, 0x1b	; 27
 3dc:	20 e1       	ldi	r18, 0x10	; 16
 3de:	c2 9f       	mul	r28, r18
 3e0:	c0 01       	movw	r24, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	6f 70       	andi	r22, 0x0F	; 15
 3e6:	68 2b       	or	r22, r24
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 1a 01 	call	0x234	; 0x234 <Dio_PortWrite>
 3ee:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Enable>
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_Init>:
 3f6:	4e e0       	ldi	r20, 0x0E	; 14
 3f8:	6e e0       	ldi	r22, 0x0E	; 14
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Dio_GroupSetDirection>
 400:	40 ef       	ldi	r20, 0xF0	; 240
 402:	60 ef       	ldi	r22, 0xF0	; 240
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Dio_GroupSetDirection>
 40a:	83 e3       	ldi	r24, 0x33	; 51
 40c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 410:	82 e3       	ldi	r24, 0x32	; 50
 412:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 416:	88 e2       	ldi	r24, 0x28	; 40
 418:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 42e:	08 95       	ret

00000430 <LCD_Data>:
 430:	cf 93       	push	r28
 432:	c8 2f       	mov	r28, r24
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 31 01 	call	0x262	; 0x262 <Dio_PinWrite>
 43e:	6b b3       	in	r22, 0x1b	; 27
 440:	8c 2f       	mov	r24, r28
 442:	80 7f       	andi	r24, 0xF0	; 240
 444:	6f 70       	andi	r22, 0x0F	; 15
 446:	68 2b       	or	r22, r24
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 1a 01 	call	0x234	; 0x234 <Dio_PortWrite>
 44e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Enable>
 452:	6b b3       	in	r22, 0x1b	; 27
 454:	20 e1       	ldi	r18, 0x10	; 16
 456:	c2 9f       	mul	r28, r18
 458:	c0 01       	movw	r24, r0
 45a:	11 24       	eor	r1, r1
 45c:	6f 70       	andi	r22, 0x0F	; 15
 45e:	68 2b       	or	r22, r24
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 1a 01 	call	0x234	; 0x234 <Dio_PortWrite>
 466:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Enable>
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <LCD_DataString>:
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	88 81       	ld	r24, Y
 476:	88 23       	and	r24, r24
 478:	31 f0       	breq	.+12     	; 0x486 <LCD_DataString+0x18>
 47a:	21 96       	adiw	r28, 0x01	; 1
 47c:	0e 94 18 02 	call	0x430	; 0x430 <LCD_Data>
 480:	89 91       	ld	r24, Y+
 482:	81 11       	cpse	r24, r1
 484:	fb cf       	rjmp	.-10     	; 0x47c <LCD_DataString+0xe>
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <LCD_Postion>:
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	19 f0       	breq	.+6      	; 0x496 <LCD_Postion+0xa>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	21 f0       	breq	.+8      	; 0x49c <LCD_Postion+0x10>
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <LCD_Postion+0x16>
 496:	8f e7       	ldi	r24, 0x7F	; 127
 498:	86 0f       	add	r24, r22
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <LCD_Postion+0x18>
 49c:	8f eb       	ldi	r24, 0xBF	; 191
 49e:	86 0f       	add	r24, r22
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <LCD_Postion+0x18>
 4a2:	80 e8       	ldi	r24, 0x80	; 128
 4a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Command>
 4a8:	08 95       	ret

000004aa <main>:
#include "LCD.h"
#include "StringHandler.h"
#include "ADC.h"
volatile uint8 ADC_Flag = 0;
int main(void)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <main+0x6>
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <main+0x8>
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <main+0xa>
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
	
	uint16 ADC_Data = 0 ;
 4b8:	1a 82       	std	Y+2, r1	; 0x02
 4ba:	19 82       	std	Y+1, r1	; 0x01
	uint8 ADC_Data_String[4] = {0} ;
 4bc:	1b 82       	std	Y+3, r1	; 0x03
 4be:	1c 82       	std	Y+4, r1	; 0x04
 4c0:	1d 82       	std	Y+5, r1	; 0x05
 4c2:	1e 82       	std	Y+6, r1	; 0x06
	LCD_Init();
 4c4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_Init>
	Adc_Init();
 4c8:	0e 94 3e 00 	call	0x7c	; 0x7c <Adc_Init>
	Adc_ChannelInit(ADC1) ;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 45 00 	call	0x8a	; 0x8a <Adc_ChannelInit>
	
	while (1)
	{
	
	
	Adc_ReadChannel(ADC0,&ADC_Data) ;
 4d2:	be 01       	movw	r22, r28
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	0e 94 53 00 	call	0xa6	; 0xa6 <Adc_ReadChannel>
	LCD_Postion(1,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Postion>
	Decimal2String( (ADC_Data>>8) ,ADC_Data_String);
 4e6:	be 01       	movw	r22, r28
 4e8:	6d 5f       	subi	r22, 0xFD	; 253
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	0e 94 88 02 	call	0x510	; 0x510 <Decimal2String>
	LCD_DataString(ADC_Data_String) ;
 4f2:	ce 01       	movw	r24, r28
 4f4:	03 96       	adiw	r24, 0x03	; 3
 4f6:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_DataString>
	Decimal2String((uint8) ADC_Data ,ADC_Data_String);
 4fa:	be 01       	movw	r22, r28
 4fc:	6d 5f       	subi	r22, 0xFD	; 253
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	0e 94 88 02 	call	0x510	; 0x510 <Decimal2String>
	LCD_DataString(ADC_Data_String) ;
 506:	ce 01       	movw	r24, r28
 508:	03 96       	adiw	r24, 0x03	; 3
 50a:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_DataString>
 50e:	e1 cf       	rjmp	.-62     	; 0x4d2 <main+0x28>

00000510 <Decimal2String>:
 510:	fb 01       	movw	r30, r22
 512:	13 82       	std	Z+3, r1	; 0x03
 514:	99 e2       	ldi	r25, 0x29	; 41
 516:	89 9f       	mul	r24, r25
 518:	91 2d       	mov	r25, r1
 51a:	11 24       	eor	r1, r1
 51c:	92 95       	swap	r25
 51e:	9f 70       	andi	r25, 0x0F	; 15
 520:	20 e3       	ldi	r18, 0x30	; 48
 522:	29 0f       	add	r18, r25
 524:	20 83       	st	Z, r18
 526:	24 e6       	ldi	r18, 0x64	; 100
 528:	92 9f       	mul	r25, r18
 52a:	80 19       	sub	r24, r0
 52c:	11 24       	eor	r1, r1
 52e:	9d ec       	ldi	r25, 0xCD	; 205
 530:	89 9f       	mul	r24, r25
 532:	91 2d       	mov	r25, r1
 534:	11 24       	eor	r1, r1
 536:	96 95       	lsr	r25
 538:	96 95       	lsr	r25
 53a:	96 95       	lsr	r25
 53c:	20 e3       	ldi	r18, 0x30	; 48
 53e:	29 0f       	add	r18, r25
 540:	21 83       	std	Z+1, r18	; 0x01
 542:	99 0f       	add	r25, r25
 544:	29 2f       	mov	r18, r25
 546:	22 0f       	add	r18, r18
 548:	22 0f       	add	r18, r18
 54a:	92 0f       	add	r25, r18
 54c:	89 1b       	sub	r24, r25
 54e:	80 5d       	subi	r24, 0xD0	; 208
 550:	82 83       	std	Z+2, r24	; 0x02
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
