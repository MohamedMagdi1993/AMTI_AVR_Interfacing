
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006f8  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000078e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a79  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c44  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001618  00000000  00000000  000030f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  0000470c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000870  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c10  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_9>
  28:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_10>
  2c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_11>
  30:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 02 	call	0x590	; 0x590 <main>
  8a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_PinSetDirection>:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
	return ReturnValue;
}
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <Dio_PinSetDirection+0x50>
  96:	38 f0       	brcs	.+14     	; 0xa6 <Dio_PinSetDirection+0x14>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <Dio_PinSetDirection+0xc>
  9c:	40 c0       	rjmp	.+128    	; 0x11e <Dio_PinSetDirection+0x8c>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_PinSetDirection+0x12>
  a2:	5a c0       	rjmp	.+180    	; 0x158 <Dio_PinSetDirection+0xc6>
  a4:	76 c0       	rjmp	.+236    	; 0x192 <Dio_PinSetDirection+0x100>
  a6:	41 11       	cpse	r20, r1
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <Dio_PinSetDirection+0x32>
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Dio_PinSetDirection+0x24>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <Dio_PinSetDirection+0x20>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	08 95       	ret
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	09 f0       	breq	.+2      	; 0xca <Dio_PinSetDirection+0x38>
  c8:	66 c0       	rjmp	.+204    	; 0x196 <Dio_PinSetDirection+0x104>
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Dio_PinSetDirection+0x44>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Dio_PinSetDirection+0x40>
  da:	82 2b       	or	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
  e2:	41 11       	cpse	r20, r1
  e4:	0d c0       	rjmp	.+26     	; 0x100 <Dio_PinSetDirection+0x6e>
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Dio_PinSetDirection+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <Dio_PinSetDirection+0x5c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <Dio_PinSetDirection+0x74>
 104:	4a c0       	rjmp	.+148    	; 0x19a <Dio_PinSetDirection+0x108>
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <Dio_PinSetDirection+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <Dio_PinSetDirection+0x7c>
 116:	82 2b       	or	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret
 11e:	41 11       	cpse	r20, r1
 120:	0d c0       	rjmp	.+26     	; 0x13c <Dio_PinSetDirection+0xaa>
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <Dio_PinSetDirection+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <Dio_PinSetDirection+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	79 f5       	brne	.+94     	; 0x19e <Dio_PinSetDirection+0x10c>
 140:	24 b3       	in	r18, 0x14	; 20
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dio_PinSetDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dio_PinSetDirection+0xb6>
 150:	82 2b       	or	r24, r18
 152:	84 bb       	out	0x14, r24	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	41 11       	cpse	r20, r1
 15a:	0d c0       	rjmp	.+26     	; 0x176 <Dio_PinSetDirection+0xe4>
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_PinSetDirection+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_PinSetDirection+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	a1 f4       	brne	.+40     	; 0x1a2 <Dio_PinSetDirection+0x110>
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dio_PinSetDirection+0xf4>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dio_PinSetDirection+0xf0>
 18a:	82 2b       	or	r24, r18
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret

000001a6 <Dio_GroupSetDirection>:
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	79 f0       	breq	.+30     	; 0x1c8 <Dio_GroupSetDirection+0x22>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <Dio_GroupSetDirection+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	a9 f0       	breq	.+42     	; 0x1da <Dio_GroupSetDirection+0x34>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	e1 f0       	breq	.+56     	; 0x1ec <Dio_GroupSetDirection+0x46>
 1b4:	24 c0       	rjmp	.+72     	; 0x1fe <Dio_GroupSetDirection+0x58>
 1b6:	8a b3       	in	r24, 0x1a	; 26
 1b8:	96 2f       	mov	r25, r22
 1ba:	90 95       	com	r25
 1bc:	89 23       	and	r24, r25
 1be:	64 23       	and	r22, r20
 1c0:	68 2b       	or	r22, r24
 1c2:	6a bb       	out	0x1a, r22	; 26
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	1c c0       	rjmp	.+56     	; 0x200 <Dio_GroupSetDirection+0x5a>
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	96 2f       	mov	r25, r22
 1cc:	90 95       	com	r25
 1ce:	89 23       	and	r24, r25
 1d0:	64 23       	and	r22, r20
 1d2:	68 2b       	or	r22, r24
 1d4:	67 bb       	out	0x17, r22	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <Dio_GroupSetDirection+0x5a>
 1da:	84 b3       	in	r24, 0x14	; 20
 1dc:	96 2f       	mov	r25, r22
 1de:	90 95       	com	r25
 1e0:	89 23       	and	r24, r25
 1e2:	64 23       	and	r22, r20
 1e4:	68 2b       	or	r22, r24
 1e6:	64 bb       	out	0x14, r22	; 20
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <Dio_GroupSetDirection+0x5a>
 1ec:	81 b3       	in	r24, 0x11	; 17
 1ee:	96 2f       	mov	r25, r22
 1f0:	90 95       	com	r25
 1f2:	89 23       	and	r24, r25
 1f4:	64 23       	and	r22, r20
 1f6:	68 2b       	or	r22, r24
 1f8:	61 bb       	out	0x11, r22	; 17
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <Dio_GroupSetDirection+0x5a>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <Dio_PortWrite>:
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	49 f0       	breq	.+18     	; 0x21a <Dio_PortWrite+0x16>
 208:	28 f0       	brcs	.+10     	; 0x214 <Dio_PortWrite+0x10>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	49 f0       	breq	.+18     	; 0x220 <Dio_PortWrite+0x1c>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	51 f0       	breq	.+20     	; 0x226 <Dio_PortWrite+0x22>
 212:	0c c0       	rjmp	.+24     	; 0x22c <Dio_PortWrite+0x28>
 214:	6b bb       	out	0x1b, r22	; 27
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0a c0       	rjmp	.+20     	; 0x22e <Dio_PortWrite+0x2a>
 21a:	68 bb       	out	0x18, r22	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	07 c0       	rjmp	.+14     	; 0x22e <Dio_PortWrite+0x2a>
 220:	65 bb       	out	0x15, r22	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	04 c0       	rjmp	.+8      	; 0x22e <Dio_PortWrite+0x2a>
 226:	62 bb       	out	0x12, r22	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	01 c0       	rjmp	.+2      	; 0x22e <Dio_PortWrite+0x2a>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <Dio_PinWrite>:
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	31 f1       	breq	.+76     	; 0x282 <Dio_PinWrite+0x50>
 236:	38 f0       	brcs	.+14     	; 0x246 <Dio_PinWrite+0x14>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	09 f4       	brne	.+2      	; 0x23e <Dio_PinWrite+0xc>
 23c:	40 c0       	rjmp	.+128    	; 0x2be <Dio_PinWrite+0x8c>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	09 f4       	brne	.+2      	; 0x244 <Dio_PinWrite+0x12>
 242:	5a c0       	rjmp	.+180    	; 0x2f8 <Dio_PinWrite+0xc6>
 244:	76 c0       	rjmp	.+236    	; 0x332 <Dio_PinWrite+0x100>
 246:	41 11       	cpse	r20, r1
 248:	0d c0       	rjmp	.+26     	; 0x264 <Dio_PinWrite+0x32>
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <Dio_PinWrite+0x24>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <Dio_PinWrite+0x20>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	70 c0       	rjmp	.+224    	; 0x344 <Dio_PinWrite+0x112>
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	09 f0       	breq	.+2      	; 0x26a <Dio_PinWrite+0x38>
 268:	66 c0       	rjmp	.+204    	; 0x336 <Dio_PinWrite+0x104>
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <Dio_PinWrite+0x44>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <Dio_PinWrite+0x40>
 27a:	82 2b       	or	r24, r18
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	61 c0       	rjmp	.+194    	; 0x344 <Dio_PinWrite+0x112>
 282:	41 11       	cpse	r20, r1
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <Dio_PinWrite+0x6e>
 286:	28 b3       	in	r18, 0x18	; 24
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <Dio_PinWrite+0x60>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <Dio_PinWrite+0x5c>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	52 c0       	rjmp	.+164    	; 0x344 <Dio_PinWrite+0x112>
 2a0:	41 30       	cpi	r20, 0x01	; 1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <Dio_PinWrite+0x74>
 2a4:	4a c0       	rjmp	.+148    	; 0x33a <Dio_PinWrite+0x108>
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <Dio_PinWrite+0x80>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <Dio_PinWrite+0x7c>
 2b6:	82 2b       	or	r24, r18
 2b8:	88 bb       	out	0x18, r24	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	43 c0       	rjmp	.+134    	; 0x344 <Dio_PinWrite+0x112>
 2be:	41 11       	cpse	r20, r1
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <Dio_PinWrite+0xaa>
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <Dio_PinWrite+0x9c>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <Dio_PinWrite+0x98>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	85 bb       	out	0x15, r24	; 21
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	34 c0       	rjmp	.+104    	; 0x344 <Dio_PinWrite+0x112>
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	79 f5       	brne	.+94     	; 0x33e <Dio_PinWrite+0x10c>
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <Dio_PinWrite+0xba>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <Dio_PinWrite+0xb6>
 2f0:	82 2b       	or	r24, r18
 2f2:	85 bb       	out	0x15, r24	; 21
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	26 c0       	rjmp	.+76     	; 0x344 <Dio_PinWrite+0x112>
 2f8:	41 11       	cpse	r20, r1
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <Dio_PinWrite+0xe4>
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <Dio_PinWrite+0xd6>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <Dio_PinWrite+0xd2>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	82 bb       	out	0x12, r24	; 18
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	17 c0       	rjmp	.+46     	; 0x344 <Dio_PinWrite+0x112>
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	a1 f4       	brne	.+40     	; 0x342 <Dio_PinWrite+0x110>
 31a:	22 b3       	in	r18, 0x12	; 18
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <Dio_PinWrite+0xf4>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <Dio_PinWrite+0xf0>
 32a:	82 2b       	or	r24, r18
 32c:	82 bb       	out	0x12, r24	; 18
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	09 c0       	rjmp	.+18     	; 0x344 <Dio_PinWrite+0x112>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	07 c0       	rjmp	.+14     	; 0x344 <Dio_PinWrite+0x112>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	05 c0       	rjmp	.+10     	; 0x344 <Dio_PinWrite+0x112>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	03 c0       	rjmp	.+6      	; 0x344 <Dio_PinWrite+0x112>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	01 c0       	rjmp	.+2      	; 0x344 <Dio_PinWrite+0x112>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	00 00       	nop
 346:	08 95       	ret

00000348 <Dio_PinPullupState>:
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	31 f1       	breq	.+76     	; 0x398 <Dio_PinPullupState+0x50>
 34c:	38 f0       	brcs	.+14     	; 0x35c <Dio_PinPullupState+0x14>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	09 f4       	brne	.+2      	; 0x354 <Dio_PinPullupState+0xc>
 352:	40 c0       	rjmp	.+128    	; 0x3d4 <Dio_PinPullupState+0x8c>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	09 f4       	brne	.+2      	; 0x35a <Dio_PinPullupState+0x12>
 358:	5a c0       	rjmp	.+180    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 35a:	76 c0       	rjmp	.+236    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
 35c:	41 11       	cpse	r20, r1
 35e:	0d c0       	rjmp	.+26     	; 0x37a <Dio_PinPullupState+0x32>
 360:	2b b3       	in	r18, 0x1b	; 27
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <Dio_PinPullupState+0x24>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <Dio_PinPullupState+0x20>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	70 c0       	rjmp	.+224    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	switch (port)
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <Dio_PinPullupState+0x38>
 37e:	66 c0       	rjmp	.+204    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 380:	2b b3       	in	r18, 0x1b	; 27
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <Dio_PinPullupState+0x44>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <Dio_PinPullupState+0x40>
 390:	82 2b       	or	r24, r18
 392:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	61 c0       	rjmp	.+194    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
 398:	41 11       	cpse	r20, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <Dio_PinPullupState+0x6e>
 39c:	28 b3       	in	r18, 0x18	; 24
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Dio_PinPullupState+0x60>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Dio_PinPullupState+0x5c>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	52 c0       	rjmp	.+164    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <Dio_PinPullupState+0x74>
 3ba:	4a c0       	rjmp	.+148    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3bc:	28 b3       	in	r18, 0x18	; 24
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <Dio_PinPullupState+0x80>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <Dio_PinPullupState+0x7c>
 3cc:	82 2b       	or	r24, r18
 3ce:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	43 c0       	rjmp	.+134    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
 3d4:	41 11       	cpse	r20, r1
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <Dio_PinPullupState+0xaa>
 3d8:	25 b3       	in	r18, 0x15	; 21
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <Dio_PinPullupState+0x9c>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <Dio_PinPullupState+0x98>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	34 c0       	rjmp	.+104    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
 3f2:	41 30       	cpi	r20, 0x01	; 1
 3f4:	79 f5       	brne	.+94     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3f6:	25 b3       	in	r18, 0x15	; 21
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <Dio_PinPullupState+0xb6>
 406:	82 2b       	or	r24, r18
 408:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	26 c0       	rjmp	.+76     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
 40e:	41 11       	cpse	r20, r1
 410:	0d c0       	rjmp	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 412:	22 b3       	in	r18, 0x12	; 18
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	80 95       	com	r24
 424:	82 23       	and	r24, r18
 426:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	17 c0       	rjmp	.+46     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	a1 f4       	brne	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 430:	22 b3       	in	r18, 0x12	; 18
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	09 c0       	rjmp	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	07 c0       	rjmp	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	switch (port)
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	05 c0       	rjmp	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	03 c0       	rjmp	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 458:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 45a:	00 00       	nop
	return ReturnValue;
}
 45c:	08 95       	ret

0000045e <__vector_1>:
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 470:	8f 91       	pop	r24
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <LCD_Enable>:
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	63 e0       	ldi	r22, 0x03	; 3
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 19 01 	call	0x232	; 0x232 <Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	8f e3       	ldi	r24, 0x3F	; 63
 488:	9c e9       	ldi	r25, 0x9C	; 156
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_Enable+0xe>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Enable+0x14>
 490:	00 00       	nop
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	63 e0       	ldi	r22, 0x03	; 3
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 19 01 	call	0x232	; 0x232 <Dio_PinWrite>
 49c:	08 95       	ret

0000049e <LCD_Command>:
 49e:	cf 93       	push	r28
 4a0:	c8 2f       	mov	r28, r24
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 19 01 	call	0x232	; 0x232 <Dio_PinWrite>
 4ac:	6b b3       	in	r22, 0x1b	; 27
 4ae:	8c 2f       	mov	r24, r28
 4b0:	80 7f       	andi	r24, 0xF0	; 240
 4b2:	6f 70       	andi	r22, 0x0F	; 15
 4b4:	68 2b       	or	r22, r24
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 02 01 	call	0x204	; 0x204 <Dio_PortWrite>
 4bc:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_Enable>
 4c0:	6b b3       	in	r22, 0x1b	; 27
 4c2:	20 e1       	ldi	r18, 0x10	; 16
 4c4:	c2 9f       	mul	r28, r18
 4c6:	c0 01       	movw	r24, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	6f 70       	andi	r22, 0x0F	; 15
 4cc:	68 2b       	or	r22, r24
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 02 01 	call	0x204	; 0x204 <Dio_PortWrite>
 4d4:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_Enable>
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_Init>:
 4dc:	4e e0       	ldi	r20, 0x0E	; 14
 4de:	6e e0       	ldi	r22, 0x0E	; 14
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_GroupSetDirection>
 4e6:	40 ef       	ldi	r20, 0xF0	; 240
 4e8:	60 ef       	ldi	r22, 0xF0	; 240
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_GroupSetDirection>
 4f0:	83 e3       	ldi	r24, 0x33	; 51
 4f2:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 4f6:	82 e3       	ldi	r24, 0x32	; 50
 4f8:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 4fc:	88 e2       	ldi	r24, 0x28	; 40
 4fe:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 502:	8c e0       	ldi	r24, 0x0C	; 12
 504:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 514:	08 95       	ret

00000516 <LCD_Data>:
 516:	cf 93       	push	r28
 518:	c8 2f       	mov	r28, r24
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 19 01 	call	0x232	; 0x232 <Dio_PinWrite>
 524:	6b b3       	in	r22, 0x1b	; 27
 526:	8c 2f       	mov	r24, r28
 528:	80 7f       	andi	r24, 0xF0	; 240
 52a:	6f 70       	andi	r22, 0x0F	; 15
 52c:	68 2b       	or	r22, r24
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 02 01 	call	0x204	; 0x204 <Dio_PortWrite>
 534:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_Enable>
 538:	6b b3       	in	r22, 0x1b	; 27
 53a:	20 e1       	ldi	r18, 0x10	; 16
 53c:	c2 9f       	mul	r28, r18
 53e:	c0 01       	movw	r24, r0
 540:	11 24       	eor	r1, r1
 542:	6f 70       	andi	r22, 0x0F	; 15
 544:	68 2b       	or	r22, r24
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 02 01 	call	0x204	; 0x204 <Dio_PortWrite>
 54c:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_Enable>
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <LCD_DataString>:
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	ec 01       	movw	r28, r24
 55a:	88 81       	ld	r24, Y
 55c:	88 23       	and	r24, r24
 55e:	31 f0       	breq	.+12     	; 0x56c <LCD_DataString+0x18>
 560:	21 96       	adiw	r28, 0x01	; 1
 562:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_Data>
 566:	89 91       	ld	r24, Y+
 568:	81 11       	cpse	r24, r1
 56a:	fb cf       	rjmp	.-10     	; 0x562 <LCD_DataString+0xe>
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <LCD_Postion>:
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	19 f0       	breq	.+6      	; 0x57c <LCD_Postion+0xa>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	21 f0       	breq	.+8      	; 0x582 <LCD_Postion+0x10>
 57a:	06 c0       	rjmp	.+12     	; 0x588 <LCD_Postion+0x16>
 57c:	8f e7       	ldi	r24, 0x7F	; 127
 57e:	86 0f       	add	r24, r22
 580:	04 c0       	rjmp	.+8      	; 0x58a <LCD_Postion+0x18>
 582:	8f eb       	ldi	r24, 0xBF	; 191
 584:	86 0f       	add	r24, r22
 586:	01 c0       	rjmp	.+2      	; 0x58a <LCD_Postion+0x18>
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_Command>
 58e:	08 95       	ret

00000590 <main>:
#include "SPI.h"

extern uint8 SPI_Slave_DataReceived; 
extern uint8 SPI_Slave_DataSend;
int main(void)
{
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	00 d0       	rcall	.+0      	; 0x596 <main+0x6>
 596:	1f 92       	push	r1
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
	uint8 SPI_SendByte = 0xCC ;
	uint8 SPI_ReceivedByte =  0xFF ;
	LCD_Init();
 59c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_Init>
	SPI_Init();
 5a0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SPI_Init>
	uint8 HexString[3] = {0};
 5a4:	19 82       	std	Y+1, r1	; 0x01
 5a6:	1a 82       	std	Y+2, r1	; 0x02
 5a8:	1b 82       	std	Y+3, r1	; 0x03
	ReturnValueType ret = NOK;
	sei();
 5aa:	78 94       	sei
	while (1)
	{
		LCD_Postion(1,1);
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Postion>
		SPI_SendByte++;
		U8HEX2String(SPI_ReceivedByte,HexString);
		#endif
		
		#if (SPIMODE == SLAVE)
		U8HEX2String(SPI_Slave_DataReceived,HexString);
 5b4:	be 01       	movw	r22, r28
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SPI_Slave_DataReceived>
 5be:	0e 94 24 03 	call	0x648	; 0x648 <U8HEX2String>
		SPI_Slave_DataSend++;
 5c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPI_Slave_DataSend>
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <SPI_Slave_DataSend>
		#endif
		LCD_DataString(HexString);
 5cc:	ce 01       	movw	r24, r28
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_DataString>
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	89 e6       	ldi	r24, 0x69	; 105
 5d8:	98 e1       	ldi	r25, 0x18	; 24
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x4a>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x54>
 5e4:	00 00       	nop
 5e6:	e2 cf       	rjmp	.-60     	; 0x5ac <main+0x1c>

000005e8 <SPI_Init>:
	Dio_PinWrite(B,SS,PinHigh);
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
	#endif
	
	#if ((SPIMODE == SLAVE))
	Dio_PinSetDirection(B,MOSI,PinInput);
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	65 e0       	ldi	r22, 0x05	; 5
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 49 00 	call	0x92	; 0x92 <Dio_PinSetDirection>
	Dio_PinSetDirection(B,MISO,PinOutput);
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	66 e0       	ldi	r22, 0x06	; 6
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 49 00 	call	0x92	; 0x92 <Dio_PinSetDirection>
	Dio_PinSetDirection(B,SCK,PinInput);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	67 e0       	ldi	r22, 0x07	; 7
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 49 00 	call	0x92	; 0x92 <Dio_PinSetDirection>
	Dio_PinSetDirection(B,SS,PinInput);
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	64 e0       	ldi	r22, 0x04	; 4
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_PinSetDirection>
	Dio_PinPullupState(B,SS,Active);
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	64 e0       	ldi	r22, 0x04	; 4
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 a4 01 	call	0x348	; 0x348 <Dio_PinPullupState>
	SPCR = (1<<SPE) |(1<<SPIE) ;
 61a:	80 ec       	ldi	r24, 0xC0	; 192
 61c:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0x00;
 61e:	1f b8       	out	0x0f, r1	; 15
	#endif

	return OK;
	
}
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	08 95       	ret

00000624 <__vector_12>:
}
#endif

#if (SPIMODE == SLAVE)
ISR(SPI_STC_vect)
{
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
 62e:	8f 93       	push	r24
	SPI_Slave_DataReceived = SPDR;
 630:	8f b1       	in	r24, 0x0f	; 15
 632:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SPI_Slave_DataReceived>
	SPDR = SPI_Slave_DataSend;
 636:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPI_Slave_DataSend>
 63a:	8f b9       	out	0x0f, r24	; 15
	
}
 63c:	8f 91       	pop	r24
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <U8HEX2String>:
*  Author: Mohamed Magdi
*/
#include "StringHandler.h"

ReturnValueType U8HEX2String (uint8 HEX,uint8 string[3])
{
 648:	fb 01       	movw	r30, r22
	/*
	Ex: HEX = 0x2F
	String = "2F"
	*/
	string[2] = 0 ;
 64a:	12 82       	std	Z+2, r1	; 0x02
 64c:	98 2f       	mov	r25, r24
 64e:	9f 70       	andi	r25, 0x0F	; 15
	if ((HEX & 0x0F) > 9)
 650:	29 2f       	mov	r18, r25
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	2a 30       	cpi	r18, 0x0A	; 10
 656:	31 05       	cpc	r19, r1
 658:	1c f0       	brlt	.+6      	; 0x660 <U8HEX2String+0x18>
	{
		string[1] =(HEX & 0x0F) - 0x0A + 'A' ;
 65a:	99 5c       	subi	r25, 0xC9	; 201
 65c:	91 83       	std	Z+1, r25	; 0x01
 65e:	02 c0       	rjmp	.+4      	; 0x664 <U8HEX2String+0x1c>
	}
	else
	{
		string[1] =(HEX & 0x0F) + '0' ;
 660:	90 5d       	subi	r25, 0xD0	; 208
 662:	91 83       	std	Z+1, r25	; 0x01
	}
	if ((HEX >> 4) > 9)
 664:	82 95       	swap	r24
 666:	8f 70       	andi	r24, 0x0F	; 15
 668:	8a 30       	cpi	r24, 0x0A	; 10
 66a:	18 f0       	brcs	.+6      	; 0x672 <U8HEX2String+0x2a>
	{
		string[0] =(HEX>>4 & 0x0F) - 0x0A + 'A' ;
 66c:	89 5c       	subi	r24, 0xC9	; 201
 66e:	80 83       	st	Z, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <U8HEX2String+0x2e>
	}
	else
	{
		string[0] =(HEX>>4 & 0x0F) + 0x30 ;
 672:	80 5d       	subi	r24, 0xD0	; 208
 674:	80 83       	st	Z, r24
	}
	
	return OK;
	
	
}
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret

0000067a <__vector_11>:
{
	
}

ISR(TIMER0_OVF_vect)
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
	Timer0_OVF_CB();
}
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
	Timer0_CMP_CB();
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <Timer1_OVF_CB>:
}
void Timer1_OVF_CB(void)
{
	ToggleBit(PORTA,0);
}
void Timer1_CMP_CB(void) {}
 6a2:	9b b3       	in	r25, 0x1b	; 27
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	89 27       	eor	r24, r25
 6a8:	8b bb       	out	0x1b, r24	; 27
 6aa:	08 95       	ret

000006ac <__vector_9>:
ISR(TIMER1_OVF_vect)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	Timer1_OVF_CB();
 6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer1_OVF_CB>
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
