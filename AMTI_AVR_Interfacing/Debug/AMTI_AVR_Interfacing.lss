
AMTI_AVR_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001440  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c3  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017e7  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  74:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_GroupSetDirection>:
			 ReturnValue= NOK;		
	}
	asm	volatile ("nop"); 
	return ReturnValue;
	
}
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	79 f0       	breq	.+30     	; 0x9e <Dio_GroupSetDirection+0x22>
  80:	28 f0       	brcs	.+10     	; 0x8c <Dio_GroupSetDirection+0x10>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	a9 f0       	breq	.+42     	; 0xb0 <Dio_GroupSetDirection+0x34>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	e1 f0       	breq	.+56     	; 0xc2 <Dio_GroupSetDirection+0x46>
  8a:	24 c0       	rjmp	.+72     	; 0xd4 <Dio_GroupSetDirection+0x58>
  8c:	8a b3       	in	r24, 0x1a	; 26
  8e:	96 2f       	mov	r25, r22
  90:	90 95       	com	r25
  92:	89 23       	and	r24, r25
  94:	64 23       	and	r22, r20
  96:	68 2b       	or	r22, r24
  98:	6a bb       	out	0x1a, r22	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	1c c0       	rjmp	.+56     	; 0xd6 <Dio_GroupSetDirection+0x5a>
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	96 2f       	mov	r25, r22
  a2:	90 95       	com	r25
  a4:	89 23       	and	r24, r25
  a6:	64 23       	and	r22, r20
  a8:	68 2b       	or	r22, r24
  aa:	67 bb       	out	0x17, r22	; 23
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	13 c0       	rjmp	.+38     	; 0xd6 <Dio_GroupSetDirection+0x5a>
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	96 2f       	mov	r25, r22
  b4:	90 95       	com	r25
  b6:	89 23       	and	r24, r25
  b8:	64 23       	and	r22, r20
  ba:	68 2b       	or	r22, r24
  bc:	64 bb       	out	0x14, r22	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <Dio_GroupSetDirection+0x5a>
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	96 2f       	mov	r25, r22
  c6:	90 95       	com	r25
  c8:	89 23       	and	r24, r25
  ca:	64 23       	and	r22, r20
  cc:	68 2b       	or	r22, r24
  ce:	61 bb       	out	0x11, r22	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <Dio_GroupSetDirection+0x5a>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <Dio_PortWrite>:
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
	switch (port)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	49 f0       	breq	.+18     	; 0xf0 <Dio_PortWrite+0x16>
  de:	28 f0       	brcs	.+10     	; 0xea <Dio_PortWrite+0x10>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	49 f0       	breq	.+18     	; 0xf6 <Dio_PortWrite+0x1c>
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	51 f0       	breq	.+20     	; 0xfc <Dio_PortWrite+0x22>
  e8:	0c c0       	rjmp	.+24     	; 0x102 <Dio_PortWrite+0x28>
	{
		case A:
		PORTA = WriteValue;
  ea:	6b bb       	out	0x1b, r22	; 27
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  ec:	81 e0       	ldi	r24, 0x01	; 1
	switch (port)
	{
		case A:
		PORTA = WriteValue;
		break;
  ee:	0a c0       	rjmp	.+20     	; 0x104 <Dio_PortWrite+0x2a>
		case B:
		PORTB = WriteValue;
  f0:	68 bb       	out	0x18, r22	; 24
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  f2:	81 e0       	ldi	r24, 0x01	; 1
		case A:
		PORTA = WriteValue;
		break;
		case B:
		PORTB = WriteValue;
		break;
  f4:	07 c0       	rjmp	.+14     	; 0x104 <Dio_PortWrite+0x2a>
		case C:
		PORTC = WriteValue;
  f6:	65 bb       	out	0x15, r22	; 21
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  f8:	81 e0       	ldi	r24, 0x01	; 1
		case B:
		PORTB = WriteValue;
		break;
		case C:
		PORTC = WriteValue;
		break;
  fa:	04 c0       	rjmp	.+8      	; 0x104 <Dio_PortWrite+0x2a>
		case D:
		PORTD = WriteValue;
  fc:	62 bb       	out	0x12, r22	; 18
	
}
/*******************************************************************************************/
ReturnValueType Dio_PortWrite(PortType port,uint8 WriteValue)
{
	ReturnValueType ReturnValue = OK ;
  fe:	81 e0       	ldi	r24, 0x01	; 1
		case C:
		PORTC = WriteValue;
		break;
		case D:
		PORTD = WriteValue;
		break;
 100:	01 c0       	rjmp	.+2      	; 0x104 <Dio_PortWrite+0x2a>
		default:
		ReturnValue = NOK ;
 102:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	asm	volatile ("nop"); 
 104:	00 00       	nop
	return ReturnValue;
}
 106:	08 95       	ret

00000108 <Dio_PinWrite>:
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	31 f1       	breq	.+76     	; 0x158 <Dio_PinWrite+0x50>
 10c:	38 f0       	brcs	.+14     	; 0x11c <Dio_PinWrite+0x14>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	09 f4       	brne	.+2      	; 0x114 <Dio_PinWrite+0xc>
 112:	40 c0       	rjmp	.+128    	; 0x194 <Dio_PinWrite+0x8c>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f4       	brne	.+2      	; 0x11a <Dio_PinWrite+0x12>
 118:	5a c0       	rjmp	.+180    	; 0x1ce <Dio_PinWrite+0xc6>
 11a:	76 c0       	rjmp	.+236    	; 0x208 <Dio_PinWrite+0x100>
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
 11c:	41 11       	cpse	r20, r1
 11e:	0d c0       	rjmp	.+26     	; 0x13a <Dio_PinWrite+0x32>
 120:	2b b3       	in	r18, 0x1b	; 27
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <Dio_PinWrite+0x24>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Dio_PinWrite+0x20>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	70 c0       	rjmp	.+224    	; 0x21a <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	09 f0       	breq	.+2      	; 0x140 <Dio_PinWrite+0x38>
 13e:	66 c0       	rjmp	.+204    	; 0x20c <Dio_PinWrite+0x104>
 140:	2b b3       	in	r18, 0x1b	; 27
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dio_PinWrite+0x44>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dio_PinWrite+0x40>
 150:	82 2b       	or	r24, r18
 152:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	61 c0       	rjmp	.+194    	; 0x21a <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
 158:	41 11       	cpse	r20, r1
 15a:	0d c0       	rjmp	.+26     	; 0x176 <Dio_PinWrite+0x6e>
 15c:	28 b3       	in	r18, 0x18	; 24
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_PinWrite+0x60>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_PinWrite+0x5c>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	52 c0       	rjmp	.+164    	; 0x21a <Dio_PinWrite+0x112>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	09 f0       	breq	.+2      	; 0x17c <Dio_PinWrite+0x74>
 17a:	4a c0       	rjmp	.+148    	; 0x210 <Dio_PinWrite+0x108>
 17c:	28 b3       	in	r18, 0x18	; 24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <Dio_PinWrite+0x80>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <Dio_PinWrite+0x7c>
 18c:	82 2b       	or	r24, r18
 18e:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	43 c0       	rjmp	.+134    	; 0x21a <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
 194:	41 11       	cpse	r20, r1
 196:	0d c0       	rjmp	.+26     	; 0x1b2 <Dio_PinWrite+0xaa>
 198:	25 b3       	in	r18, 0x15	; 21
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Dio_PinWrite+0x9c>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <Dio_PinWrite+0x98>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	34 c0       	rjmp	.+104    	; 0x21a <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
 1b2:	41 30       	cpi	r20, 0x01	; 1
 1b4:	79 f5       	brne	.+94     	; 0x214 <Dio_PinWrite+0x10c>
 1b6:	25 b3       	in	r18, 0x15	; 21
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Dio_PinWrite+0xba>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Dio_PinWrite+0xb6>
 1c6:	82 2b       	or	r24, r18
 1c8:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
 1ce:	41 11       	cpse	r20, r1
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <Dio_PinWrite+0xe4>
 1d2:	22 b3       	in	r18, 0x12	; 18
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_PinWrite+0xd6>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_PinWrite+0xd2>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <Dio_PinWrite+0x112>
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	a1 f4       	brne	.+40     	; 0x218 <Dio_PinWrite+0x110>
 1f0:	22 b3       	in	r18, 0x12	; 18
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <Dio_PinWrite+0xf4>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <Dio_PinWrite+0xf0>
 200:	82 2b       	or	r24, r18
 202:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinWrite(PortType port,uint8 PinNumber ,PinStateType PinState )
{
	ReturnValueType  ReturnValue = OK;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	09 c0       	rjmp	.+18     	; 0x21a <Dio_PinWrite+0x112>
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	07 c0       	rjmp	.+14     	; 0x21a <Dio_PinWrite+0x112>
	switch (port)
	{
		case A:
		if (PinState == PinLow) ClearBit(PORTA,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	05 c0       	rjmp	.+10     	; 0x21a <Dio_PinWrite+0x112>
		
		break;
		case B:
		if (PinState == PinLow) ClearBit(PORTB,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	03 c0       	rjmp	.+6      	; 0x21a <Dio_PinWrite+0x112>
		break;
		case C:
		if (PinState == PinLow) ClearBit(PORTC,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <Dio_PinWrite+0x112>
		break;
		case D:
		if (PinState == PinLow) ClearBit(PORTD,PinNumber);
		else if (PinState == PinHigh) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 218:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 21a:	00 00       	nop
	return ReturnValue;
}
 21c:	08 95       	ret

0000021e <__vector_1>:
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <LCD_Enable>:
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 84 00 	call	0x108	; 0x108 <Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	9c e9       	ldi	r25, 0x9C	; 156
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_Enable+0xe>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_Enable+0x14>
 250:	00 00       	nop
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 84 00 	call	0x108	; 0x108 <Dio_PinWrite>
 25c:	08 95       	ret

0000025e <LCD_Command>:
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 84 00 	call	0x108	; 0x108 <Dio_PinWrite>
 26c:	6b b3       	in	r22, 0x1b	; 27
 26e:	8c 2f       	mov	r24, r28
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	6f 70       	andi	r22, 0x0F	; 15
 274:	68 2b       	or	r22, r24
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 6d 00 	call	0xda	; 0xda <Dio_PortWrite>
 27c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Enable>
 280:	6b b3       	in	r22, 0x1b	; 27
 282:	20 e1       	ldi	r18, 0x10	; 16
 284:	c2 9f       	mul	r28, r18
 286:	c0 01       	movw	r24, r0
 288:	11 24       	eor	r1, r1
 28a:	6f 70       	andi	r22, 0x0F	; 15
 28c:	68 2b       	or	r22, r24
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 6d 00 	call	0xda	; 0xda <Dio_PortWrite>
 294:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Enable>
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <LCD_Init>:
 29c:	4e e0       	ldi	r20, 0x0E	; 14
 29e:	6e e0       	ldi	r22, 0x0E	; 14
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_GroupSetDirection>
 2a6:	40 ef       	ldi	r20, 0xF0	; 240
 2a8:	60 ef       	ldi	r22, 0xF0	; 240
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_GroupSetDirection>
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2b6:	82 e3       	ldi	r24, 0x32	; 50
 2b8:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2bc:	88 e2       	ldi	r24, 0x28	; 40
 2be:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 2d4:	08 95       	ret

000002d6 <LCD_Data>:
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 84 00 	call	0x108	; 0x108 <Dio_PinWrite>
 2e4:	6b b3       	in	r22, 0x1b	; 27
 2e6:	8c 2f       	mov	r24, r28
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	6f 70       	andi	r22, 0x0F	; 15
 2ec:	68 2b       	or	r22, r24
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 6d 00 	call	0xda	; 0xda <Dio_PortWrite>
 2f4:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Enable>
 2f8:	6b b3       	in	r22, 0x1b	; 27
 2fa:	20 e1       	ldi	r18, 0x10	; 16
 2fc:	c2 9f       	mul	r28, r18
 2fe:	c0 01       	movw	r24, r0
 300:	11 24       	eor	r1, r1
 302:	6f 70       	andi	r22, 0x0F	; 15
 304:	68 2b       	or	r22, r24
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 6d 00 	call	0xda	; 0xda <Dio_PortWrite>
 30c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Enable>
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <LCD_DataString>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	31 f0       	breq	.+12     	; 0x32c <LCD_DataString+0x18>
 320:	21 96       	adiw	r28, 0x01	; 1
 322:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_Data>
 326:	89 91       	ld	r24, Y+
 328:	81 11       	cpse	r24, r1
 32a:	fb cf       	rjmp	.-10     	; 0x322 <LCD_DataString+0xe>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <LCD_Postion>:
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	19 f0       	breq	.+6      	; 0x33c <LCD_Postion+0xa>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	21 f0       	breq	.+8      	; 0x342 <LCD_Postion+0x10>
 33a:	06 c0       	rjmp	.+12     	; 0x348 <LCD_Postion+0x16>
 33c:	8f e7       	ldi	r24, 0x7F	; 127
 33e:	86 0f       	add	r24, r22
 340:	04 c0       	rjmp	.+8      	; 0x34a <LCD_Postion+0x18>
 342:	8f eb       	ldi	r24, 0xBF	; 191
 344:	86 0f       	add	r24, r22
 346:	01 c0       	rjmp	.+2      	; 0x34a <LCD_Postion+0x18>
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Command>
 34e:	08 95       	ret

00000350 <main>:
#include <avr/interrupt.h>
#include "LCD.h"
#include "StringHandler.h"
volatile uint8 ADC_Flag = 0;
int main(void)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <main+0x6>
 356:	00 d0       	rcall	.+0      	; 0x358 <main+0x8>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
	
	uint16 ADC_Data = 0 ;
	uint8 ADC_Data_String[4] = {0} ;
 35c:	19 82       	std	Y+1, r1	; 0x01
 35e:	1a 82       	std	Y+2, r1	; 0x02
 360:	1b 82       	std	Y+3, r1	; 0x03
 362:	1c 82       	std	Y+4, r1	; 0x04
	LCD_Init();
 364:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Init>
	DDRA &=~ (1<<PA1) ; // 1 
 368:	d1 98       	cbi	0x1a, 1	; 26
	ADCSRA |= (1<<ADEN) ; // 2 
 36a:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 36c:	86 b1       	in	r24, 0x06	; 6
 36e:	87 60       	ori	r24, 0x07	; 7
 370:	86 b9       	out	0x06, r24	; 6
	SetBit(ADMUX,REFS0) ;
 372:	3e 9a       	sbi	0x07, 6	; 7
	ClearBit(ADMUX,REFS1);
 374:	3f 98       	cbi	0x07, 7	; 7
	SetBit(ADMUX,MUX0);
 376:	38 9a       	sbi	0x07, 0	; 7
	ADMUX &= ~ (1<<MUX1) & ~ (1<<MUX2) & ~ (1<<MUX3) & ~ (1<<MUX4);
 378:	87 b1       	in	r24, 0x07	; 7
 37a:	81 7e       	andi	r24, 0xE1	; 225
 37c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADIE) ;
 37e:	33 9a       	sbi	0x06, 3	; 6
	sei();
 380:	78 94       	sei
	SetBit(ADCSRA,ADSC);
 382:	36 9a       	sbi	0x06, 6	; 6
	while (1)
	{
	
	if (ADC_Flag == 1)
 384:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ADC_Flag>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x34>
	{
		ADC_Flag = 0 ;
 38c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ADC_Flag>
	ADC_Data = ADCL ;
 390:	04 b1       	in	r16, 0x04	; 4
	ADC_Data |= (uint16) (ADCH<<8) ;
 392:	85 b1       	in	r24, 0x05	; 5
 394:	10 e0       	ldi	r17, 0x00	; 0
 396:	18 2b       	or	r17, r24
	
	LCD_Postion(1,1);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 99 01 	call	0x332	; 0x332 <LCD_Postion>
	Decimal2String( (ADC_Data>>8) ,ADC_Data_String);
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	81 2f       	mov	r24, r17
 3a8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Decimal2String>
	LCD_DataString(ADC_Data_String) ;
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_DataString>
	Decimal2String((uint8) ADC_Data ,ADC_Data_String);
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	80 2f       	mov	r24, r16
 3bc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Decimal2String>
	LCD_DataString(ADC_Data_String) ;
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_DataString>
	SetBit(ADCSRA,ADSC);
 3c8:	36 9a       	sbi	0x06, 6	; 6
 3ca:	dc cf       	rjmp	.-72     	; 0x384 <main+0x34>

000003cc <__vector_16>:
		
	}
}

ISR(ADC_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
	ADC_Flag = 1 ;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ADC_Flag>
	
}
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <Decimal2String>:
 3ea:	fb 01       	movw	r30, r22
 3ec:	13 82       	std	Z+3, r1	; 0x03
 3ee:	99 e2       	ldi	r25, 0x29	; 41
 3f0:	89 9f       	mul	r24, r25
 3f2:	91 2d       	mov	r25, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	92 95       	swap	r25
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	20 e3       	ldi	r18, 0x30	; 48
 3fc:	29 0f       	add	r18, r25
 3fe:	20 83       	st	Z, r18
 400:	24 e6       	ldi	r18, 0x64	; 100
 402:	92 9f       	mul	r25, r18
 404:	80 19       	sub	r24, r0
 406:	11 24       	eor	r1, r1
 408:	9d ec       	ldi	r25, 0xCD	; 205
 40a:	89 9f       	mul	r24, r25
 40c:	91 2d       	mov	r25, r1
 40e:	11 24       	eor	r1, r1
 410:	96 95       	lsr	r25
 412:	96 95       	lsr	r25
 414:	96 95       	lsr	r25
 416:	20 e3       	ldi	r18, 0x30	; 48
 418:	29 0f       	add	r18, r25
 41a:	21 83       	std	Z+1, r18	; 0x01
 41c:	99 0f       	add	r25, r25
 41e:	29 2f       	mov	r18, r25
 420:	22 0f       	add	r18, r18
 422:	22 0f       	add	r18, r18
 424:	92 0f       	add	r25, r18
 426:	89 1b       	sub	r24, r25
 428:	80 5d       	subi	r24, 0xD0	; 208
 42a:	82 83       	std	Z+2, r24	; 0x02
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
